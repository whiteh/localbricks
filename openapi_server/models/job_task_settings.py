# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401
from openapi_server.models.job_email_notifications import JobEmailNotifications
from openapi_server.models.library import Library
from openapi_server.models.new_cluster import NewCluster
from openapi_server.models.notebook_task import NotebookTask
from openapi_server.models.pipeline_task import PipelineTask
from openapi_server.models.python_wheel_task import PythonWheelTask
from openapi_server.models.spark_jar_task import SparkJarTask
from openapi_server.models.spark_python_task import SparkPythonTask
from openapi_server.models.spark_submit_task import SparkSubmitTask
from openapi_server.models.task_dependencies_inner import TaskDependenciesInner


class JobTaskSettings(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    JobTaskSettings - a model defined in OpenAPI

        task_key: The task_key of this JobTaskSettings.
        description: The description of this JobTaskSettings [Optional].
        depends_on: The depends_on of this JobTaskSettings [Optional].
        existing_cluster_id: The existing_cluster_id of this JobTaskSettings [Optional].
        new_cluster: The new_cluster of this JobTaskSettings [Optional].
        job_cluster_key: The job_cluster_key of this JobTaskSettings [Optional].
        notebook_task: The notebook_task of this JobTaskSettings [Optional].
        spark_jar_task: The spark_jar_task of this JobTaskSettings [Optional].
        spark_python_task: The spark_python_task of this JobTaskSettings [Optional].
        spark_submit_task: The spark_submit_task of this JobTaskSettings [Optional].
        pipeline_task: The pipeline_task of this JobTaskSettings [Optional].
        python_wheel_task: The python_wheel_task of this JobTaskSettings [Optional].
        libraries: The libraries of this JobTaskSettings [Optional].
        email_notifications: The email_notifications of this JobTaskSettings [Optional].
        timeout_seconds: The timeout_seconds of this JobTaskSettings [Optional].
        max_retries: The max_retries of this JobTaskSettings [Optional].
        min_retry_interval_millis: The min_retry_interval_millis of this JobTaskSettings [Optional].
        retry_on_timeout: The retry_on_timeout of this JobTaskSettings [Optional].
    """

    task_key: str = Field(alias="task_key")
    description: Optional[str] = Field(alias="description", default=None)
    depends_on: Optional[List[TaskDependenciesInner]
                         ] = Field(alias="depends_on", default=None)
    existing_cluster_id: Optional[str] = Field(
        alias="existing_cluster_id", default=None)
    new_cluster: Optional[NewCluster] = Field(alias="new_cluster", default=None)
    job_cluster_key: Optional[str] = Field(alias="job_cluster_key", default=None)
    notebook_task: Optional[NotebookTask] = Field(alias="notebook_task", default=None)
    spark_jar_task: Optional[SparkJarTask] = Field(alias="spark_jar_task", default=None)
    spark_python_task: Optional[SparkPythonTask] = Field(
        alias="spark_python_task", default=None)
    spark_submit_task: Optional[SparkSubmitTask] = Field(
        alias="spark_submit_task", default=None)
    pipeline_task: Optional[PipelineTask] = Field(alias="pipeline_task", default=None)
    python_wheel_task: Optional[PythonWheelTask] = Field(
        alias="python_wheel_task", default=None)
    libraries: Optional[List[Library]] = Field(alias="libraries", default=None)
    email_notifications: Optional[JobEmailNotifications] = Field(
        alias="email_notifications", default=None)
    timeout_seconds: Optional[int] = Field(alias="timeout_seconds", default=None)
    max_retries: Optional[int] = Field(alias="max_retries", default=None)
    min_retry_interval_millis: Optional[int] = Field(
        alias="min_retry_interval_millis", default=None)
    retry_on_timeout: Optional[bool] = Field(alias="retry_on_timeout", default=None)

    @validator("task_key")
    def task_key_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("task_key")
    def task_key_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("task_key")
    def task_key_pattern(cls, value):
        assert value is not None and re.match(r"^[\w\-]+$", value)
        return value

    @validator("description")
    def description_max_length(cls, value):
        assert len(value) <= 4096
        return value

    @validator("job_cluster_key")
    def job_cluster_key_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("job_cluster_key")
    def job_cluster_key_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("job_cluster_key")
    def job_cluster_key_pattern(cls, value):
        assert value is not None and re.match(r"^[\w\-]+$", value)
        return value


JobTaskSettings.update_forward_refs()
