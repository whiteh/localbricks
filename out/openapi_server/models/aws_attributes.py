# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class AwsAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_on_demand=None, availability=None, zone_id=None, instance_profile_arn=None, spot_bid_price_percent=None, ebs_volume_type=None, ebs_volume_count=None, ebs_volume_size=None, ebs_volume_iops=None, ebs_volume_throughput=None):  # noqa: E501
        """AwsAttributes - a model defined in OpenAPI

        :param first_on_demand: The first_on_demand of this AwsAttributes.  # noqa: E501
        :type first_on_demand: int
        :param availability: The availability of this AwsAttributes.  # noqa: E501
        :type availability: str
        :param zone_id: The zone_id of this AwsAttributes.  # noqa: E501
        :type zone_id: str
        :param instance_profile_arn: The instance_profile_arn of this AwsAttributes.  # noqa: E501
        :type instance_profile_arn: str
        :param spot_bid_price_percent: The spot_bid_price_percent of this AwsAttributes.  # noqa: E501
        :type spot_bid_price_percent: int
        :param ebs_volume_type: The ebs_volume_type of this AwsAttributes.  # noqa: E501
        :type ebs_volume_type: str
        :param ebs_volume_count: The ebs_volume_count of this AwsAttributes.  # noqa: E501
        :type ebs_volume_count: int
        :param ebs_volume_size: The ebs_volume_size of this AwsAttributes.  # noqa: E501
        :type ebs_volume_size: int
        :param ebs_volume_iops: The ebs_volume_iops of this AwsAttributes.  # noqa: E501
        :type ebs_volume_iops: int
        :param ebs_volume_throughput: The ebs_volume_throughput of this AwsAttributes.  # noqa: E501
        :type ebs_volume_throughput: int
        """
        self.openapi_types = {
            'first_on_demand': int,
            'availability': str,
            'zone_id': str,
            'instance_profile_arn': str,
            'spot_bid_price_percent': int,
            'ebs_volume_type': str,
            'ebs_volume_count': int,
            'ebs_volume_size': int,
            'ebs_volume_iops': int,
            'ebs_volume_throughput': int
        }

        self.attribute_map = {
            'first_on_demand': 'first_on_demand',
            'availability': 'availability',
            'zone_id': 'zone_id',
            'instance_profile_arn': 'instance_profile_arn',
            'spot_bid_price_percent': 'spot_bid_price_percent',
            'ebs_volume_type': 'ebs_volume_type',
            'ebs_volume_count': 'ebs_volume_count',
            'ebs_volume_size': 'ebs_volume_size',
            'ebs_volume_iops': 'ebs_volume_iops',
            'ebs_volume_throughput': 'ebs_volume_throughput'
        }

        self._first_on_demand = first_on_demand
        self._availability = availability
        self._zone_id = zone_id
        self._instance_profile_arn = instance_profile_arn
        self._spot_bid_price_percent = spot_bid_price_percent
        self._ebs_volume_type = ebs_volume_type
        self._ebs_volume_count = ebs_volume_count
        self._ebs_volume_size = ebs_volume_size
        self._ebs_volume_iops = ebs_volume_iops
        self._ebs_volume_throughput = ebs_volume_throughput

    @classmethod
    def from_dict(cls, dikt) -> 'AwsAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AwsAttributes of this AwsAttributes.  # noqa: E501
        :rtype: AwsAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_on_demand(self):
        """Gets the first_on_demand of this AwsAttributes.

        The first first_on_demand nodes of the cluster are placed on on-demand instances. If this value is greater than 0, the cluster driver node is placed on an on-demand instance. If this value is greater than or equal to the current cluster size, all nodes are placed on on-demand instances. If this value is less than the current cluster size, first_on_demand nodes are placed on on-demand instances and the remainder are placed on `availability` instances. This value does not affect cluster size and cannot be mutated over the lifetime of a cluster.  # noqa: E501

        :return: The first_on_demand of this AwsAttributes.
        :rtype: int
        """
        return self._first_on_demand

    @first_on_demand.setter
    def first_on_demand(self, first_on_demand):
        """Sets the first_on_demand of this AwsAttributes.

        The first first_on_demand nodes of the cluster are placed on on-demand instances. If this value is greater than 0, the cluster driver node is placed on an on-demand instance. If this value is greater than or equal to the current cluster size, all nodes are placed on on-demand instances. If this value is less than the current cluster size, first_on_demand nodes are placed on on-demand instances and the remainder are placed on `availability` instances. This value does not affect cluster size and cannot be mutated over the lifetime of a cluster.  # noqa: E501

        :param first_on_demand: The first_on_demand of this AwsAttributes.
        :type first_on_demand: int
        """

        self._first_on_demand = first_on_demand

    @property
    def availability(self):
        """Gets the availability of this AwsAttributes.

        Availability type used for all subsequent nodes past the `first_on_demand` ones. **Note:** If `first_on_demand` is zero, this availability type is used for the entire cluster.  `SPOT`: use spot instances. `ON_DEMAND`: use on-demand instances. `SPOT_WITH_FALLBACK`: preferably use spot instances, but fall back to on-demand instances if spot instances cannot be acquired (for example, if AWS spot prices are too high).  # noqa: E501

        :return: The availability of this AwsAttributes.
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this AwsAttributes.

        Availability type used for all subsequent nodes past the `first_on_demand` ones. **Note:** If `first_on_demand` is zero, this availability type is used for the entire cluster.  `SPOT`: use spot instances. `ON_DEMAND`: use on-demand instances. `SPOT_WITH_FALLBACK`: preferably use spot instances, but fall back to on-demand instances if spot instances cannot be acquired (for example, if AWS spot prices are too high).  # noqa: E501

        :param availability: The availability of this AwsAttributes.
        :type availability: str
        """
        allowed_values = ["SPOT", "ON_DEMAND", "SPOT_WITH_FALLBACK"]  # noqa: E501
        if availability not in allowed_values:
            raise ValueError(
                "Invalid value for `availability` ({0}), must be one of {1}"
                .format(availability, allowed_values)
            )

        self._availability = availability

    @property
    def zone_id(self):
        """Gets the zone_id of this AwsAttributes.

        Identifier for the availability zone/datacenter in which the cluster resides. You have three options:  **Specify an availability zone as a string**, for example: “us-west-2a”. The provided availability zone must be in the same region as the Databricks deployment. For example, “us-west-2a” is not a valid zone ID if the Databricks deployment resides in the “us-east-1” region.  **Enable automatic availability zone selection (“Auto-AZ”)**, by setting the value “auto”. Databricks selects the AZ based on available IPs in the workspace subnets and retries in other availability zones if AWS returns insufficient capacity errors.  **Do not specify a value**. If not specified, a default zone is used.  The list of available zones as well as the default value can be found by using the [List zones](https://docs.databricks.com/dev-tools/api/latest/clusters.html#list-zones) API.  # noqa: E501

        :return: The zone_id of this AwsAttributes.
        :rtype: str
        """
        return self._zone_id

    @zone_id.setter
    def zone_id(self, zone_id):
        """Sets the zone_id of this AwsAttributes.

        Identifier for the availability zone/datacenter in which the cluster resides. You have three options:  **Specify an availability zone as a string**, for example: “us-west-2a”. The provided availability zone must be in the same region as the Databricks deployment. For example, “us-west-2a” is not a valid zone ID if the Databricks deployment resides in the “us-east-1” region.  **Enable automatic availability zone selection (“Auto-AZ”)**, by setting the value “auto”. Databricks selects the AZ based on available IPs in the workspace subnets and retries in other availability zones if AWS returns insufficient capacity errors.  **Do not specify a value**. If not specified, a default zone is used.  The list of available zones as well as the default value can be found by using the [List zones](https://docs.databricks.com/dev-tools/api/latest/clusters.html#list-zones) API.  # noqa: E501

        :param zone_id: The zone_id of this AwsAttributes.
        :type zone_id: str
        """

        self._zone_id = zone_id

    @property
    def instance_profile_arn(self):
        """Gets the instance_profile_arn of this AwsAttributes.

        Nodes for this cluster are only be placed on AWS instances with this instance profile. If omitted, nodes are placed on instances without an instance profile. The instance profile must have previously been added to the Databricks environment by an account administrator.  This feature may only be available to certain customer plans.  # noqa: E501

        :return: The instance_profile_arn of this AwsAttributes.
        :rtype: str
        """
        return self._instance_profile_arn

    @instance_profile_arn.setter
    def instance_profile_arn(self, instance_profile_arn):
        """Sets the instance_profile_arn of this AwsAttributes.

        Nodes for this cluster are only be placed on AWS instances with this instance profile. If omitted, nodes are placed on instances without an instance profile. The instance profile must have previously been added to the Databricks environment by an account administrator.  This feature may only be available to certain customer plans.  # noqa: E501

        :param instance_profile_arn: The instance_profile_arn of this AwsAttributes.
        :type instance_profile_arn: str
        """

        self._instance_profile_arn = instance_profile_arn

    @property
    def spot_bid_price_percent(self):
        """Gets the spot_bid_price_percent of this AwsAttributes.

        The max price for AWS spot instances, as a percentage of the corresponding instance type’s on-demand price. For example, if this field is set to 50, and the cluster needs a new `i3.xlarge` spot instance, then the max price is half of the price of on-demand `i3.xlarge` instances. Similarly, if this field is set to 200, the max price is twice the price of on-demand `i3.xlarge` instances. If not specified, the default value is 100\\. When spot instances are requested for this cluster, only spot instances whose max price percentage matches this field is considered. For safety, we enforce this field to be no more than 10000.  # noqa: E501

        :return: The spot_bid_price_percent of this AwsAttributes.
        :rtype: int
        """
        return self._spot_bid_price_percent

    @spot_bid_price_percent.setter
    def spot_bid_price_percent(self, spot_bid_price_percent):
        """Sets the spot_bid_price_percent of this AwsAttributes.

        The max price for AWS spot instances, as a percentage of the corresponding instance type’s on-demand price. For example, if this field is set to 50, and the cluster needs a new `i3.xlarge` spot instance, then the max price is half of the price of on-demand `i3.xlarge` instances. Similarly, if this field is set to 200, the max price is twice the price of on-demand `i3.xlarge` instances. If not specified, the default value is 100\\. When spot instances are requested for this cluster, only spot instances whose max price percentage matches this field is considered. For safety, we enforce this field to be no more than 10000.  # noqa: E501

        :param spot_bid_price_percent: The spot_bid_price_percent of this AwsAttributes.
        :type spot_bid_price_percent: int
        """

        self._spot_bid_price_percent = spot_bid_price_percent

    @property
    def ebs_volume_type(self):
        """Gets the ebs_volume_type of this AwsAttributes.

        The type of EBS volume that is launched with this cluster.  `GENERAL_PURPOSE_SSD`: provision extra storage using AWS gp2 EBS volumes. `THROUGHPUT_OPTIMIZED_HDD`: provision extra storage using AWS st1 volumes.  # noqa: E501

        :return: The ebs_volume_type of this AwsAttributes.
        :rtype: str
        """
        return self._ebs_volume_type

    @ebs_volume_type.setter
    def ebs_volume_type(self, ebs_volume_type):
        """Sets the ebs_volume_type of this AwsAttributes.

        The type of EBS volume that is launched with this cluster.  `GENERAL_PURPOSE_SSD`: provision extra storage using AWS gp2 EBS volumes. `THROUGHPUT_OPTIMIZED_HDD`: provision extra storage using AWS st1 volumes.  # noqa: E501

        :param ebs_volume_type: The ebs_volume_type of this AwsAttributes.
        :type ebs_volume_type: str
        """
        allowed_values = ["GENERAL_PURPOSE_SSD", "THROUGHPUT_OPTIMIZED_HDD"]  # noqa: E501
        if ebs_volume_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ebs_volume_type` ({0}), must be one of {1}"
                .format(ebs_volume_type, allowed_values)
            )

        self._ebs_volume_type = ebs_volume_type

    @property
    def ebs_volume_count(self):
        """Gets the ebs_volume_count of this AwsAttributes.

        The number of volumes launched for each instance. You can choose up to 10 volumes. This feature is only enabled for supported node types. Legacy node types cannot specify custom EBS volumes. For node types with no instance store, at least one EBS volume needs to be specified; otherwise, cluster creation fails.  These EBS volumes are mounted at `/ebs0`, `/ebs1`, and etc. Instance store volumes are mounted at `/local_disk0`, `/local_disk1`, and etc.  If EBS volumes are attached, Databricks configures Spark to use only the EBS volumes for scratch storage because heterogeneously sized scratch devices can lead to inefficient disk utilization. If no EBS volumes are attached, Databricks configures Spark to use instance store volumes.  If EBS volumes are specified, then the Spark configuration `spark.local.dir` is overridden.  # noqa: E501

        :return: The ebs_volume_count of this AwsAttributes.
        :rtype: int
        """
        return self._ebs_volume_count

    @ebs_volume_count.setter
    def ebs_volume_count(self, ebs_volume_count):
        """Sets the ebs_volume_count of this AwsAttributes.

        The number of volumes launched for each instance. You can choose up to 10 volumes. This feature is only enabled for supported node types. Legacy node types cannot specify custom EBS volumes. For node types with no instance store, at least one EBS volume needs to be specified; otherwise, cluster creation fails.  These EBS volumes are mounted at `/ebs0`, `/ebs1`, and etc. Instance store volumes are mounted at `/local_disk0`, `/local_disk1`, and etc.  If EBS volumes are attached, Databricks configures Spark to use only the EBS volumes for scratch storage because heterogeneously sized scratch devices can lead to inefficient disk utilization. If no EBS volumes are attached, Databricks configures Spark to use instance store volumes.  If EBS volumes are specified, then the Spark configuration `spark.local.dir` is overridden.  # noqa: E501

        :param ebs_volume_count: The ebs_volume_count of this AwsAttributes.
        :type ebs_volume_count: int
        """

        self._ebs_volume_count = ebs_volume_count

    @property
    def ebs_volume_size(self):
        """Gets the ebs_volume_size of this AwsAttributes.

        The size of each EBS volume (in GiB) launched for each instance. For general purpose SSD, this value must be within the range 100 - 4096\\. For throughput optimized HDD, this value must be within the range 500 - 4096\\. Custom EBS volumes cannot be specified for the legacy node types (_memory-optimized_ and _compute-optimized_).  # noqa: E501

        :return: The ebs_volume_size of this AwsAttributes.
        :rtype: int
        """
        return self._ebs_volume_size

    @ebs_volume_size.setter
    def ebs_volume_size(self, ebs_volume_size):
        """Sets the ebs_volume_size of this AwsAttributes.

        The size of each EBS volume (in GiB) launched for each instance. For general purpose SSD, this value must be within the range 100 - 4096\\. For throughput optimized HDD, this value must be within the range 500 - 4096\\. Custom EBS volumes cannot be specified for the legacy node types (_memory-optimized_ and _compute-optimized_).  # noqa: E501

        :param ebs_volume_size: The ebs_volume_size of this AwsAttributes.
        :type ebs_volume_size: int
        """

        self._ebs_volume_size = ebs_volume_size

    @property
    def ebs_volume_iops(self):
        """Gets the ebs_volume_iops of this AwsAttributes.

        The number of IOPS per EBS gp3 volume.  This value must be between 3000 and 16000.  The value of IOPS and throughput is calculated based on AWS documentation to match the maximum performance of a gp2 volume with the same volume size.  For more information, see the [EBS volume limit calculator](https://github.com/awslabs/aws-support-tools/tree/master/EBS/VolumeLimitCalculator).  # noqa: E501

        :return: The ebs_volume_iops of this AwsAttributes.
        :rtype: int
        """
        return self._ebs_volume_iops

    @ebs_volume_iops.setter
    def ebs_volume_iops(self, ebs_volume_iops):
        """Sets the ebs_volume_iops of this AwsAttributes.

        The number of IOPS per EBS gp3 volume.  This value must be between 3000 and 16000.  The value of IOPS and throughput is calculated based on AWS documentation to match the maximum performance of a gp2 volume with the same volume size.  For more information, see the [EBS volume limit calculator](https://github.com/awslabs/aws-support-tools/tree/master/EBS/VolumeLimitCalculator).  # noqa: E501

        :param ebs_volume_iops: The ebs_volume_iops of this AwsAttributes.
        :type ebs_volume_iops: int
        """

        self._ebs_volume_iops = ebs_volume_iops

    @property
    def ebs_volume_throughput(self):
        """Gets the ebs_volume_throughput of this AwsAttributes.

        The throughput per EBS gp3 volume, in MiB per second.  This value must be between 125 and 1000.  # noqa: E501

        :return: The ebs_volume_throughput of this AwsAttributes.
        :rtype: int
        """
        return self._ebs_volume_throughput

    @ebs_volume_throughput.setter
    def ebs_volume_throughput(self, ebs_volume_throughput):
        """Sets the ebs_volume_throughput of this AwsAttributes.

        The throughput per EBS gp3 volume, in MiB per second.  This value must be between 125 and 1000.  # noqa: E501

        :param ebs_volume_throughput: The ebs_volume_throughput of this AwsAttributes.
        :type ebs_volume_throughput: int
        """

        self._ebs_volume_throughput = ebs_volume_throughput
