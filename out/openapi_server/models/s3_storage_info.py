# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class S3StorageInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination=None, region=None, endpoint=None, enable_encryption=None, encryption_type=None, kms_key=None, canned_acl=None):  # noqa: E501
        """S3StorageInfo - a model defined in OpenAPI

        :param destination: The destination of this S3StorageInfo.  # noqa: E501
        :type destination: str
        :param region: The region of this S3StorageInfo.  # noqa: E501
        :type region: str
        :param endpoint: The endpoint of this S3StorageInfo.  # noqa: E501
        :type endpoint: str
        :param enable_encryption: The enable_encryption of this S3StorageInfo.  # noqa: E501
        :type enable_encryption: bool
        :param encryption_type: The encryption_type of this S3StorageInfo.  # noqa: E501
        :type encryption_type: str
        :param kms_key: The kms_key of this S3StorageInfo.  # noqa: E501
        :type kms_key: str
        :param canned_acl: The canned_acl of this S3StorageInfo.  # noqa: E501
        :type canned_acl: str
        """
        self.openapi_types = {
            'destination': str,
            'region': str,
            'endpoint': str,
            'enable_encryption': bool,
            'encryption_type': str,
            'kms_key': str,
            'canned_acl': str
        }

        self.attribute_map = {
            'destination': 'destination',
            'region': 'region',
            'endpoint': 'endpoint',
            'enable_encryption': 'enable_encryption',
            'encryption_type': 'encryption_type',
            'kms_key': 'kms_key',
            'canned_acl': 'canned_acl'
        }

        self._destination = destination
        self._region = region
        self._endpoint = endpoint
        self._enable_encryption = enable_encryption
        self._encryption_type = encryption_type
        self._kms_key = kms_key
        self._canned_acl = canned_acl

    @classmethod
    def from_dict(cls, dikt) -> 'S3StorageInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The S3StorageInfo of this S3StorageInfo.  # noqa: E501
        :rtype: S3StorageInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination(self):
        """Gets the destination of this S3StorageInfo.

        S3 destination. For example: `s3://my-bucket/some-prefix` You must configure the cluster with an instance profile and the instance profile must have write access to the destination. You _cannot_ use AWS keys.  # noqa: E501

        :return: The destination of this S3StorageInfo.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this S3StorageInfo.

        S3 destination. For example: `s3://my-bucket/some-prefix` You must configure the cluster with an instance profile and the instance profile must have write access to the destination. You _cannot_ use AWS keys.  # noqa: E501

        :param destination: The destination of this S3StorageInfo.
        :type destination: str
        """

        self._destination = destination

    @property
    def region(self):
        """Gets the region of this S3StorageInfo.

        S3 region. For example: `us-west-2`. Either region or endpoint must be set. If both are set, endpoint is used.  # noqa: E501

        :return: The region of this S3StorageInfo.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this S3StorageInfo.

        S3 region. For example: `us-west-2`. Either region or endpoint must be set. If both are set, endpoint is used.  # noqa: E501

        :param region: The region of this S3StorageInfo.
        :type region: str
        """

        self._region = region

    @property
    def endpoint(self):
        """Gets the endpoint of this S3StorageInfo.

        S3 endpoint. For example: `https://s3-us-west-2.amazonaws.com`. Either region or endpoint must be set. If both are set, endpoint is used.  # noqa: E501

        :return: The endpoint of this S3StorageInfo.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this S3StorageInfo.

        S3 endpoint. For example: `https://s3-us-west-2.amazonaws.com`. Either region or endpoint must be set. If both are set, endpoint is used.  # noqa: E501

        :param endpoint: The endpoint of this S3StorageInfo.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def enable_encryption(self):
        """Gets the enable_encryption of this S3StorageInfo.

        (Optional)Enable server side encryption, `false` by default.  # noqa: E501

        :return: The enable_encryption of this S3StorageInfo.
        :rtype: bool
        """
        return self._enable_encryption

    @enable_encryption.setter
    def enable_encryption(self, enable_encryption):
        """Sets the enable_encryption of this S3StorageInfo.

        (Optional)Enable server side encryption, `false` by default.  # noqa: E501

        :param enable_encryption: The enable_encryption of this S3StorageInfo.
        :type enable_encryption: bool
        """

        self._enable_encryption = enable_encryption

    @property
    def encryption_type(self):
        """Gets the encryption_type of this S3StorageInfo.

        (Optional) The encryption type, it could be `sse-s3` or `sse-kms`. It is used only when encryption is enabled and the default type is `sse-s3`.  # noqa: E501

        :return: The encryption_type of this S3StorageInfo.
        :rtype: str
        """
        return self._encryption_type

    @encryption_type.setter
    def encryption_type(self, encryption_type):
        """Sets the encryption_type of this S3StorageInfo.

        (Optional) The encryption type, it could be `sse-s3` or `sse-kms`. It is used only when encryption is enabled and the default type is `sse-s3`.  # noqa: E501

        :param encryption_type: The encryption_type of this S3StorageInfo.
        :type encryption_type: str
        """

        self._encryption_type = encryption_type

    @property
    def kms_key(self):
        """Gets the kms_key of this S3StorageInfo.

        (Optional) KMS key used if encryption is enabled and encryption type is set to `sse-kms`.  # noqa: E501

        :return: The kms_key of this S3StorageInfo.
        :rtype: str
        """
        return self._kms_key

    @kms_key.setter
    def kms_key(self, kms_key):
        """Sets the kms_key of this S3StorageInfo.

        (Optional) KMS key used if encryption is enabled and encryption type is set to `sse-kms`.  # noqa: E501

        :param kms_key: The kms_key of this S3StorageInfo.
        :type kms_key: str
        """

        self._kms_key = kms_key

    @property
    def canned_acl(self):
        """Gets the canned_acl of this S3StorageInfo.

        (Optional) Set canned access control list. For example: `bucket-owner-full-control`. If canned_acl is set, the cluster instance profile must have `s3:PutObjectAcl` permission on the destination bucket and prefix. The full list of possible canned ACLs can be found at <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl>. By default only the object owner gets full control. If you are using cross account role for writing data, you may want to set `bucket-owner-full-control` to make bucket owner able to read the logs.  # noqa: E501

        :return: The canned_acl of this S3StorageInfo.
        :rtype: str
        """
        return self._canned_acl

    @canned_acl.setter
    def canned_acl(self, canned_acl):
        """Sets the canned_acl of this S3StorageInfo.

        (Optional) Set canned access control list. For example: `bucket-owner-full-control`. If canned_acl is set, the cluster instance profile must have `s3:PutObjectAcl` permission on the destination bucket and prefix. The full list of possible canned ACLs can be found at <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl>. By default only the object owner gets full control. If you are using cross account role for writing data, you may want to set `bucket-owner-full-control` to make bucket owner able to read the logs.  # noqa: E501

        :param canned_acl: The canned_acl of this S3StorageInfo.
        :type canned_acl: str
        """

        self._canned_acl = canned_acl
