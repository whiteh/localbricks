# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.spark_node_aws_attributes import SparkNodeAwsAttributes
from openapi_server import util

from openapi_server.models.spark_node_aws_attributes import SparkNodeAwsAttributes  # noqa: E501

class SparkNode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, private_ip=None, public_dns=None, node_id=None, instance_id=None, start_timestamp=None, node_aws_attributes=None, host_private_ip=None):  # noqa: E501
        """SparkNode - a model defined in OpenAPI

        :param private_ip: The private_ip of this SparkNode.  # noqa: E501
        :type private_ip: str
        :param public_dns: The public_dns of this SparkNode.  # noqa: E501
        :type public_dns: str
        :param node_id: The node_id of this SparkNode.  # noqa: E501
        :type node_id: str
        :param instance_id: The instance_id of this SparkNode.  # noqa: E501
        :type instance_id: str
        :param start_timestamp: The start_timestamp of this SparkNode.  # noqa: E501
        :type start_timestamp: int
        :param node_aws_attributes: The node_aws_attributes of this SparkNode.  # noqa: E501
        :type node_aws_attributes: SparkNodeAwsAttributes
        :param host_private_ip: The host_private_ip of this SparkNode.  # noqa: E501
        :type host_private_ip: str
        """
        self.openapi_types = {
            'private_ip': str,
            'public_dns': str,
            'node_id': str,
            'instance_id': str,
            'start_timestamp': int,
            'node_aws_attributes': SparkNodeAwsAttributes,
            'host_private_ip': str
        }

        self.attribute_map = {
            'private_ip': 'private_ip',
            'public_dns': 'public_dns',
            'node_id': 'node_id',
            'instance_id': 'instance_id',
            'start_timestamp': 'start_timestamp',
            'node_aws_attributes': 'node_aws_attributes',
            'host_private_ip': 'host_private_ip'
        }

        self._private_ip = private_ip
        self._public_dns = public_dns
        self._node_id = node_id
        self._instance_id = instance_id
        self._start_timestamp = start_timestamp
        self._node_aws_attributes = node_aws_attributes
        self._host_private_ip = host_private_ip

    @classmethod
    def from_dict(cls, dikt) -> 'SparkNode':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SparkNode of this SparkNode.  # noqa: E501
        :rtype: SparkNode
        """
        return util.deserialize_model(dikt, cls)

    @property
    def private_ip(self):
        """Gets the private_ip of this SparkNode.

        Private IP address (typically a 10.x.x.x address) of the Spark node. This is different from the private IP address of the host instance.  # noqa: E501

        :return: The private_ip of this SparkNode.
        :rtype: str
        """
        return self._private_ip

    @private_ip.setter
    def private_ip(self, private_ip):
        """Sets the private_ip of this SparkNode.

        Private IP address (typically a 10.x.x.x address) of the Spark node. This is different from the private IP address of the host instance.  # noqa: E501

        :param private_ip: The private_ip of this SparkNode.
        :type private_ip: str
        """

        self._private_ip = private_ip

    @property
    def public_dns(self):
        """Gets the public_dns of this SparkNode.

        Public DNS address of this node. This address can be used to access the Spark JDBC server on the driver node. To communicate with the JDBC server, traffic must be manually authorized by adding security group rules to the “worker-unmanaged” security group via the AWS console.  # noqa: E501

        :return: The public_dns of this SparkNode.
        :rtype: str
        """
        return self._public_dns

    @public_dns.setter
    def public_dns(self, public_dns):
        """Sets the public_dns of this SparkNode.

        Public DNS address of this node. This address can be used to access the Spark JDBC server on the driver node. To communicate with the JDBC server, traffic must be manually authorized by adding security group rules to the “worker-unmanaged” security group via the AWS console.  # noqa: E501

        :param public_dns: The public_dns of this SparkNode.
        :type public_dns: str
        """

        self._public_dns = public_dns

    @property
    def node_id(self):
        """Gets the node_id of this SparkNode.

        Globally unique identifier for this node.  # noqa: E501

        :return: The node_id of this SparkNode.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this SparkNode.

        Globally unique identifier for this node.  # noqa: E501

        :param node_id: The node_id of this SparkNode.
        :type node_id: str
        """

        self._node_id = node_id

    @property
    def instance_id(self):
        """Gets the instance_id of this SparkNode.

        Globally unique identifier for the host instance from the cloud provider.  # noqa: E501

        :return: The instance_id of this SparkNode.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this SparkNode.

        Globally unique identifier for the host instance from the cloud provider.  # noqa: E501

        :param instance_id: The instance_id of this SparkNode.
        :type instance_id: str
        """

        self._instance_id = instance_id

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this SparkNode.

        The timestamp (in millisecond) when the Spark node is launched.  # noqa: E501

        :return: The start_timestamp of this SparkNode.
        :rtype: int
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this SparkNode.

        The timestamp (in millisecond) when the Spark node is launched.  # noqa: E501

        :param start_timestamp: The start_timestamp of this SparkNode.
        :type start_timestamp: int
        """

        self._start_timestamp = start_timestamp

    @property
    def node_aws_attributes(self):
        """Gets the node_aws_attributes of this SparkNode.


        :return: The node_aws_attributes of this SparkNode.
        :rtype: SparkNodeAwsAttributes
        """
        return self._node_aws_attributes

    @node_aws_attributes.setter
    def node_aws_attributes(self, node_aws_attributes):
        """Sets the node_aws_attributes of this SparkNode.


        :param node_aws_attributes: The node_aws_attributes of this SparkNode.
        :type node_aws_attributes: SparkNodeAwsAttributes
        """

        self._node_aws_attributes = node_aws_attributes

    @property
    def host_private_ip(self):
        """Gets the host_private_ip of this SparkNode.

        The private IP address of the host instance.  # noqa: E501

        :return: The host_private_ip of this SparkNode.
        :rtype: str
        """
        return self._host_private_ip

    @host_private_ip.setter
    def host_private_ip(self, host_private_ip):
        """Sets the host_private_ip of this SparkNode.

        The private IP address of the host instance.  # noqa: E501

        :param host_private_ip: The host_private_ip of this SparkNode.
        :type host_private_ip: str
        """

        self._host_private_ip = host_private_ip
