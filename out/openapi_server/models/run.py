# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.cluster_instance import ClusterInstance
from openapi_server.models.cluster_spec import ClusterSpec
from openapi_server.models.cron_schedule import CronSchedule
from openapi_server.models.git_source import GitSource
from openapi_server.models.job_cluster import JobCluster
from openapi_server.models.run_parameters import RunParameters
from openapi_server.models.run_state import RunState
from openapi_server.models.run_task import RunTask
from openapi_server.models.run_type import RunType
from openapi_server.models.trigger_type import TriggerType
from openapi_server import util

from openapi_server.models.cluster_instance import ClusterInstance  # noqa: E501
from openapi_server.models.cluster_spec import ClusterSpec  # noqa: E501
from openapi_server.models.cron_schedule import CronSchedule  # noqa: E501
from openapi_server.models.git_source import GitSource  # noqa: E501
from openapi_server.models.job_cluster import JobCluster  # noqa: E501
from openapi_server.models.run_parameters import RunParameters  # noqa: E501
from openapi_server.models.run_state import RunState  # noqa: E501
from openapi_server.models.run_task import RunTask  # noqa: E501
from openapi_server.models.run_type import RunType  # noqa: E501
from openapi_server.models.trigger_type import TriggerType  # noqa: E501

class Run(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_id=None, run_id=None, number_in_job=None, creator_user_name=None, original_attempt_run_id=None, state=None, schedule=None, tasks=None, job_clusters=None, cluster_spec=None, cluster_instance=None, git_source=None, overriding_parameters=None, start_time=None, setup_duration=None, execution_duration=None, cleanup_duration=None, end_time=None, trigger=None, run_name='Untitled', run_page_url=None, run_type=None, attempt_number=None):  # noqa: E501
        """Run - a model defined in OpenAPI

        :param job_id: The job_id of this Run.  # noqa: E501
        :type job_id: int
        :param run_id: The run_id of this Run.  # noqa: E501
        :type run_id: int
        :param number_in_job: The number_in_job of this Run.  # noqa: E501
        :type number_in_job: int
        :param creator_user_name: The creator_user_name of this Run.  # noqa: E501
        :type creator_user_name: str
        :param original_attempt_run_id: The original_attempt_run_id of this Run.  # noqa: E501
        :type original_attempt_run_id: int
        :param state: The state of this Run.  # noqa: E501
        :type state: RunState
        :param schedule: The schedule of this Run.  # noqa: E501
        :type schedule: CronSchedule
        :param tasks: The tasks of this Run.  # noqa: E501
        :type tasks: List[RunTask]
        :param job_clusters: The job_clusters of this Run.  # noqa: E501
        :type job_clusters: List[JobCluster]
        :param cluster_spec: The cluster_spec of this Run.  # noqa: E501
        :type cluster_spec: ClusterSpec
        :param cluster_instance: The cluster_instance of this Run.  # noqa: E501
        :type cluster_instance: ClusterInstance
        :param git_source: The git_source of this Run.  # noqa: E501
        :type git_source: GitSource
        :param overriding_parameters: The overriding_parameters of this Run.  # noqa: E501
        :type overriding_parameters: RunParameters
        :param start_time: The start_time of this Run.  # noqa: E501
        :type start_time: int
        :param setup_duration: The setup_duration of this Run.  # noqa: E501
        :type setup_duration: int
        :param execution_duration: The execution_duration of this Run.  # noqa: E501
        :type execution_duration: int
        :param cleanup_duration: The cleanup_duration of this Run.  # noqa: E501
        :type cleanup_duration: int
        :param end_time: The end_time of this Run.  # noqa: E501
        :type end_time: int
        :param trigger: The trigger of this Run.  # noqa: E501
        :type trigger: TriggerType
        :param run_name: The run_name of this Run.  # noqa: E501
        :type run_name: str
        :param run_page_url: The run_page_url of this Run.  # noqa: E501
        :type run_page_url: str
        :param run_type: The run_type of this Run.  # noqa: E501
        :type run_type: RunType
        :param attempt_number: The attempt_number of this Run.  # noqa: E501
        :type attempt_number: int
        """
        self.openapi_types = {
            'job_id': int,
            'run_id': int,
            'number_in_job': int,
            'creator_user_name': str,
            'original_attempt_run_id': int,
            'state': RunState,
            'schedule': CronSchedule,
            'tasks': List[RunTask],
            'job_clusters': List[JobCluster],
            'cluster_spec': ClusterSpec,
            'cluster_instance': ClusterInstance,
            'git_source': GitSource,
            'overriding_parameters': RunParameters,
            'start_time': int,
            'setup_duration': int,
            'execution_duration': int,
            'cleanup_duration': int,
            'end_time': int,
            'trigger': TriggerType,
            'run_name': str,
            'run_page_url': str,
            'run_type': RunType,
            'attempt_number': int
        }

        self.attribute_map = {
            'job_id': 'job_id',
            'run_id': 'run_id',
            'number_in_job': 'number_in_job',
            'creator_user_name': 'creator_user_name',
            'original_attempt_run_id': 'original_attempt_run_id',
            'state': 'state',
            'schedule': 'schedule',
            'tasks': 'tasks',
            'job_clusters': 'job_clusters',
            'cluster_spec': 'cluster_spec',
            'cluster_instance': 'cluster_instance',
            'git_source': 'git_source',
            'overriding_parameters': 'overriding_parameters',
            'start_time': 'start_time',
            'setup_duration': 'setup_duration',
            'execution_duration': 'execution_duration',
            'cleanup_duration': 'cleanup_duration',
            'end_time': 'end_time',
            'trigger': 'trigger',
            'run_name': 'run_name',
            'run_page_url': 'run_page_url',
            'run_type': 'run_type',
            'attempt_number': 'attempt_number'
        }

        self._job_id = job_id
        self._run_id = run_id
        self._number_in_job = number_in_job
        self._creator_user_name = creator_user_name
        self._original_attempt_run_id = original_attempt_run_id
        self._state = state
        self._schedule = schedule
        self._tasks = tasks
        self._job_clusters = job_clusters
        self._cluster_spec = cluster_spec
        self._cluster_instance = cluster_instance
        self._git_source = git_source
        self._overriding_parameters = overriding_parameters
        self._start_time = start_time
        self._setup_duration = setup_duration
        self._execution_duration = execution_duration
        self._cleanup_duration = cleanup_duration
        self._end_time = end_time
        self._trigger = trigger
        self._run_name = run_name
        self._run_page_url = run_page_url
        self._run_type = run_type
        self._attempt_number = attempt_number

    @classmethod
    def from_dict(cls, dikt) -> 'Run':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Run of this Run.  # noqa: E501
        :rtype: Run
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self):
        """Gets the job_id of this Run.

        The canonical identifier of the job that contains this run.  # noqa: E501

        :return: The job_id of this Run.
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this Run.

        The canonical identifier of the job that contains this run.  # noqa: E501

        :param job_id: The job_id of this Run.
        :type job_id: int
        """

        self._job_id = job_id

    @property
    def run_id(self):
        """Gets the run_id of this Run.

        The canonical identifier of the run. This ID is unique across all runs of all jobs.  # noqa: E501

        :return: The run_id of this Run.
        :rtype: int
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this Run.

        The canonical identifier of the run. This ID is unique across all runs of all jobs.  # noqa: E501

        :param run_id: The run_id of this Run.
        :type run_id: int
        """

        self._run_id = run_id

    @property
    def number_in_job(self):
        """Gets the number_in_job of this Run.

        A unique identifier for this job run. This is set to the same value as `run_id`.  # noqa: E501

        :return: The number_in_job of this Run.
        :rtype: int
        """
        return self._number_in_job

    @number_in_job.setter
    def number_in_job(self, number_in_job):
        """Sets the number_in_job of this Run.

        A unique identifier for this job run. This is set to the same value as `run_id`.  # noqa: E501

        :param number_in_job: The number_in_job of this Run.
        :type number_in_job: int
        """

        self._number_in_job = number_in_job

    @property
    def creator_user_name(self):
        """Gets the creator_user_name of this Run.

        The creator user name. This field wonâ€™t be included in the response if the user has already been deleted.  # noqa: E501

        :return: The creator_user_name of this Run.
        :rtype: str
        """
        return self._creator_user_name

    @creator_user_name.setter
    def creator_user_name(self, creator_user_name):
        """Sets the creator_user_name of this Run.

        The creator user name. This field wonâ€™t be included in the response if the user has already been deleted.  # noqa: E501

        :param creator_user_name: The creator_user_name of this Run.
        :type creator_user_name: str
        """

        self._creator_user_name = creator_user_name

    @property
    def original_attempt_run_id(self):
        """Gets the original_attempt_run_id of this Run.

        If this run is a retry of a prior run attempt, this field contains the run_id of the original attempt; otherwise, it is the same as the run_id.  # noqa: E501

        :return: The original_attempt_run_id of this Run.
        :rtype: int
        """
        return self._original_attempt_run_id

    @original_attempt_run_id.setter
    def original_attempt_run_id(self, original_attempt_run_id):
        """Sets the original_attempt_run_id of this Run.

        If this run is a retry of a prior run attempt, this field contains the run_id of the original attempt; otherwise, it is the same as the run_id.  # noqa: E501

        :param original_attempt_run_id: The original_attempt_run_id of this Run.
        :type original_attempt_run_id: int
        """

        self._original_attempt_run_id = original_attempt_run_id

    @property
    def state(self):
        """Gets the state of this Run.


        :return: The state of this Run.
        :rtype: RunState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Run.


        :param state: The state of this Run.
        :type state: RunState
        """

        self._state = state

    @property
    def schedule(self):
        """Gets the schedule of this Run.


        :return: The schedule of this Run.
        :rtype: CronSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this Run.


        :param schedule: The schedule of this Run.
        :type schedule: CronSchedule
        """

        self._schedule = schedule

    @property
    def tasks(self):
        """Gets the tasks of this Run.

        The list of tasks performed by the run. Each task has its own `run_id` which you can use to call `JobsGetOutput` to retrieve the run resutls.  # noqa: E501

        :return: The tasks of this Run.
        :rtype: List[RunTask]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this Run.

        The list of tasks performed by the run. Each task has its own `run_id` which you can use to call `JobsGetOutput` to retrieve the run resutls.  # noqa: E501

        :param tasks: The tasks of this Run.
        :type tasks: List[RunTask]
        """
        if tasks is not None and len(tasks) > 100:
            raise ValueError("Invalid value for `tasks`, number of items must be less than or equal to `100`")  # noqa: E501

        self._tasks = tasks

    @property
    def job_clusters(self):
        """Gets the job_clusters of this Run.

        A list of job cluster specifications that can be shared and reused by tasks of this job. Libraries cannot be declared in a shared job cluster. You must declare dependent libraries in task settings.  # noqa: E501

        :return: The job_clusters of this Run.
        :rtype: List[JobCluster]
        """
        return self._job_clusters

    @job_clusters.setter
    def job_clusters(self, job_clusters):
        """Sets the job_clusters of this Run.

        A list of job cluster specifications that can be shared and reused by tasks of this job. Libraries cannot be declared in a shared job cluster. You must declare dependent libraries in task settings.  # noqa: E501

        :param job_clusters: The job_clusters of this Run.
        :type job_clusters: List[JobCluster]
        """
        if job_clusters is not None and len(job_clusters) > 100:
            raise ValueError("Invalid value for `job_clusters`, number of items must be less than or equal to `100`")  # noqa: E501

        self._job_clusters = job_clusters

    @property
    def cluster_spec(self):
        """Gets the cluster_spec of this Run.


        :return: The cluster_spec of this Run.
        :rtype: ClusterSpec
        """
        return self._cluster_spec

    @cluster_spec.setter
    def cluster_spec(self, cluster_spec):
        """Sets the cluster_spec of this Run.


        :param cluster_spec: The cluster_spec of this Run.
        :type cluster_spec: ClusterSpec
        """

        self._cluster_spec = cluster_spec

    @property
    def cluster_instance(self):
        """Gets the cluster_instance of this Run.


        :return: The cluster_instance of this Run.
        :rtype: ClusterInstance
        """
        return self._cluster_instance

    @cluster_instance.setter
    def cluster_instance(self, cluster_instance):
        """Sets the cluster_instance of this Run.


        :param cluster_instance: The cluster_instance of this Run.
        :type cluster_instance: ClusterInstance
        """

        self._cluster_instance = cluster_instance

    @property
    def git_source(self):
        """Gets the git_source of this Run.


        :return: The git_source of this Run.
        :rtype: GitSource
        """
        return self._git_source

    @git_source.setter
    def git_source(self, git_source):
        """Sets the git_source of this Run.


        :param git_source: The git_source of this Run.
        :type git_source: GitSource
        """

        self._git_source = git_source

    @property
    def overriding_parameters(self):
        """Gets the overriding_parameters of this Run.


        :return: The overriding_parameters of this Run.
        :rtype: RunParameters
        """
        return self._overriding_parameters

    @overriding_parameters.setter
    def overriding_parameters(self, overriding_parameters):
        """Sets the overriding_parameters of this Run.


        :param overriding_parameters: The overriding_parameters of this Run.
        :type overriding_parameters: RunParameters
        """

        self._overriding_parameters = overriding_parameters

    @property
    def start_time(self):
        """Gets the start_time of this Run.

        The time at which this run was started in epoch milliseconds (milliseconds since 1/1/1970 UTC). This may not be the time when the job task starts executing, for example, if the job is scheduled to run on a new cluster, this is the time the cluster creation call is issued.  # noqa: E501

        :return: The start_time of this Run.
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Run.

        The time at which this run was started in epoch milliseconds (milliseconds since 1/1/1970 UTC). This may not be the time when the job task starts executing, for example, if the job is scheduled to run on a new cluster, this is the time the cluster creation call is issued.  # noqa: E501

        :param start_time: The start_time of this Run.
        :type start_time: int
        """

        self._start_time = start_time

    @property
    def setup_duration(self):
        """Gets the setup_duration of this Run.

        The time it took to set up the cluster in milliseconds. For runs that run on new clusters this is the cluster creation time, for runs that run on existing clusters this time should be very short.  # noqa: E501

        :return: The setup_duration of this Run.
        :rtype: int
        """
        return self._setup_duration

    @setup_duration.setter
    def setup_duration(self, setup_duration):
        """Sets the setup_duration of this Run.

        The time it took to set up the cluster in milliseconds. For runs that run on new clusters this is the cluster creation time, for runs that run on existing clusters this time should be very short.  # noqa: E501

        :param setup_duration: The setup_duration of this Run.
        :type setup_duration: int
        """

        self._setup_duration = setup_duration

    @property
    def execution_duration(self):
        """Gets the execution_duration of this Run.

        The time in milliseconds it took to execute the commands in the JAR or notebook until they completed, failed, timed out, were cancelled, or encountered an unexpected error.  # noqa: E501

        :return: The execution_duration of this Run.
        :rtype: int
        """
        return self._execution_duration

    @execution_duration.setter
    def execution_duration(self, execution_duration):
        """Sets the execution_duration of this Run.

        The time in milliseconds it took to execute the commands in the JAR or notebook until they completed, failed, timed out, were cancelled, or encountered an unexpected error.  # noqa: E501

        :param execution_duration: The execution_duration of this Run.
        :type execution_duration: int
        """

        self._execution_duration = execution_duration

    @property
    def cleanup_duration(self):
        """Gets the cleanup_duration of this Run.

        The time in milliseconds it took to terminate the cluster and clean up any associated artifacts. The total duration of the run is the sum of the setup_duration, the execution_duration, and the cleanup_duration.  # noqa: E501

        :return: The cleanup_duration of this Run.
        :rtype: int
        """
        return self._cleanup_duration

    @cleanup_duration.setter
    def cleanup_duration(self, cleanup_duration):
        """Sets the cleanup_duration of this Run.

        The time in milliseconds it took to terminate the cluster and clean up any associated artifacts. The total duration of the run is the sum of the setup_duration, the execution_duration, and the cleanup_duration.  # noqa: E501

        :param cleanup_duration: The cleanup_duration of this Run.
        :type cleanup_duration: int
        """

        self._cleanup_duration = cleanup_duration

    @property
    def end_time(self):
        """Gets the end_time of this Run.

        The time at which this run ended in epoch milliseconds (milliseconds since 1/1/1970 UTC). This field is set to 0 if the job is still running.  # noqa: E501

        :return: The end_time of this Run.
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Run.

        The time at which this run ended in epoch milliseconds (milliseconds since 1/1/1970 UTC). This field is set to 0 if the job is still running.  # noqa: E501

        :param end_time: The end_time of this Run.
        :type end_time: int
        """

        self._end_time = end_time

    @property
    def trigger(self):
        """Gets the trigger of this Run.


        :return: The trigger of this Run.
        :rtype: TriggerType
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this Run.


        :param trigger: The trigger of this Run.
        :type trigger: TriggerType
        """

        self._trigger = trigger

    @property
    def run_name(self):
        """Gets the run_name of this Run.

        An optional name for the run. The maximum allowed length is 4096 bytes in UTF-8 encoding.  # noqa: E501

        :return: The run_name of this Run.
        :rtype: str
        """
        return self._run_name

    @run_name.setter
    def run_name(self, run_name):
        """Sets the run_name of this Run.

        An optional name for the run. The maximum allowed length is 4096 bytes in UTF-8 encoding.  # noqa: E501

        :param run_name: The run_name of this Run.
        :type run_name: str
        """

        self._run_name = run_name

    @property
    def run_page_url(self):
        """Gets the run_page_url of this Run.

        The URL to the detail page of the run.  # noqa: E501

        :return: The run_page_url of this Run.
        :rtype: str
        """
        return self._run_page_url

    @run_page_url.setter
    def run_page_url(self, run_page_url):
        """Sets the run_page_url of this Run.

        The URL to the detail page of the run.  # noqa: E501

        :param run_page_url: The run_page_url of this Run.
        :type run_page_url: str
        """

        self._run_page_url = run_page_url

    @property
    def run_type(self):
        """Gets the run_type of this Run.


        :return: The run_type of this Run.
        :rtype: RunType
        """
        return self._run_type

    @run_type.setter
    def run_type(self, run_type):
        """Sets the run_type of this Run.


        :param run_type: The run_type of this Run.
        :type run_type: RunType
        """

        self._run_type = run_type

    @property
    def attempt_number(self):
        """Gets the attempt_number of this Run.

        The sequence number of this run attempt for a triggered job run. The initial attempt of a run has an attempt_number of 0\\. If the initial run attempt fails, and the job has a retry policy (`max_retries` \\> 0), subsequent runs are created with an `original_attempt_run_id` of the original attemptâ€™s ID and an incrementing `attempt_number`. Runs are retried only until they succeed, and the maximum `attempt_number` is the same as the `max_retries` value for the job.  # noqa: E501

        :return: The attempt_number of this Run.
        :rtype: int
        """
        return self._attempt_number

    @attempt_number.setter
    def attempt_number(self, attempt_number):
        """Sets the attempt_number of this Run.

        The sequence number of this run attempt for a triggered job run. The initial attempt of a run has an attempt_number of 0\\. If the initial run attempt fails, and the job has a retry policy (`max_retries` \\> 0), subsequent runs are created with an `original_attempt_run_id` of the original attemptâ€™s ID and an incrementing `attempt_number`. Runs are retried only until they succeed, and the maximum `attempt_number` is the same as the `max_retries` value for the job.  # noqa: E501

        :param attempt_number: The attempt_number of this Run.
        :type attempt_number: int
        """

        self._attempt_number = attempt_number
