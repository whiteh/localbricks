# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.new_cluster import NewCluster
import re
from openapi_server import util

from openapi_server.models.new_cluster import NewCluster  # noqa: E501
import re  # noqa: E501

class JobCluster(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_cluster_key=None, new_cluster=None):  # noqa: E501
        """JobCluster - a model defined in OpenAPI

        :param job_cluster_key: The job_cluster_key of this JobCluster.  # noqa: E501
        :type job_cluster_key: str
        :param new_cluster: The new_cluster of this JobCluster.  # noqa: E501
        :type new_cluster: NewCluster
        """
        self.openapi_types = {
            'job_cluster_key': str,
            'new_cluster': NewCluster
        }

        self.attribute_map = {
            'job_cluster_key': 'job_cluster_key',
            'new_cluster': 'new_cluster'
        }

        self._job_cluster_key = job_cluster_key
        self._new_cluster = new_cluster

    @classmethod
    def from_dict(cls, dikt) -> 'JobCluster':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JobCluster of this JobCluster.  # noqa: E501
        :rtype: JobCluster
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_cluster_key(self):
        """Gets the job_cluster_key of this JobCluster.

        A unique name for the job cluster. This field is required and must be unique within the job. `JobTaskSettings` may refer to this field to determine which cluster to launch for the task execution.  # noqa: E501

        :return: The job_cluster_key of this JobCluster.
        :rtype: str
        """
        return self._job_cluster_key

    @job_cluster_key.setter
    def job_cluster_key(self, job_cluster_key):
        """Sets the job_cluster_key of this JobCluster.

        A unique name for the job cluster. This field is required and must be unique within the job. `JobTaskSettings` may refer to this field to determine which cluster to launch for the task execution.  # noqa: E501

        :param job_cluster_key: The job_cluster_key of this JobCluster.
        :type job_cluster_key: str
        """
        if job_cluster_key is None:
            raise ValueError("Invalid value for `job_cluster_key`, must not be `None`")  # noqa: E501
        if job_cluster_key is not None and len(job_cluster_key) > 100:
            raise ValueError("Invalid value for `job_cluster_key`, length must be less than or equal to `100`")  # noqa: E501
        if job_cluster_key is not None and len(job_cluster_key) < 1:
            raise ValueError("Invalid value for `job_cluster_key`, length must be greater than or equal to `1`")  # noqa: E501
        if job_cluster_key is not None and not re.search(r'^[\w\-]+$', job_cluster_key):  # noqa: E501
            raise ValueError("Invalid value for `job_cluster_key`, must be a follow pattern or equal to `/^[\w\-]+$/`")  # noqa: E501

        self._job_cluster_key = job_cluster_key

    @property
    def new_cluster(self):
        """Gets the new_cluster of this JobCluster.


        :return: The new_cluster of this JobCluster.
        :rtype: NewCluster
        """
        return self._new_cluster

    @new_cluster.setter
    def new_cluster(self, new_cluster):
        """Sets the new_cluster of this JobCluster.


        :param new_cluster: The new_cluster of this JobCluster.
        :type new_cluster: NewCluster
        """

        self._new_cluster = new_cluster
