# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.library import Library
from openapi_server.models.new_cluster import NewCluster
from openapi_server import util

from openapi_server.models.library import Library  # noqa: E501
from openapi_server.models.new_cluster import NewCluster  # noqa: E501

class ClusterSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, existing_cluster_id=None, new_cluster=None, libraries=None):  # noqa: E501
        """ClusterSpec - a model defined in OpenAPI

        :param existing_cluster_id: The existing_cluster_id of this ClusterSpec.  # noqa: E501
        :type existing_cluster_id: str
        :param new_cluster: The new_cluster of this ClusterSpec.  # noqa: E501
        :type new_cluster: NewCluster
        :param libraries: The libraries of this ClusterSpec.  # noqa: E501
        :type libraries: List[Library]
        """
        self.openapi_types = {
            'existing_cluster_id': str,
            'new_cluster': NewCluster,
            'libraries': List[Library]
        }

        self.attribute_map = {
            'existing_cluster_id': 'existing_cluster_id',
            'new_cluster': 'new_cluster',
            'libraries': 'libraries'
        }

        self._existing_cluster_id = existing_cluster_id
        self._new_cluster = new_cluster
        self._libraries = libraries

    @classmethod
    def from_dict(cls, dikt) -> 'ClusterSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ClusterSpec of this ClusterSpec.  # noqa: E501
        :rtype: ClusterSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def existing_cluster_id(self):
        """Gets the existing_cluster_id of this ClusterSpec.

        If existing_cluster_id, the ID of an existing cluster that is used for all runs of this job. When running jobs on an existing cluster, you may need to manually restart the cluster if it stops responding. We suggest running jobs on new clusters for greater reliability.  # noqa: E501

        :return: The existing_cluster_id of this ClusterSpec.
        :rtype: str
        """
        return self._existing_cluster_id

    @existing_cluster_id.setter
    def existing_cluster_id(self, existing_cluster_id):
        """Sets the existing_cluster_id of this ClusterSpec.

        If existing_cluster_id, the ID of an existing cluster that is used for all runs of this job. When running jobs on an existing cluster, you may need to manually restart the cluster if it stops responding. We suggest running jobs on new clusters for greater reliability.  # noqa: E501

        :param existing_cluster_id: The existing_cluster_id of this ClusterSpec.
        :type existing_cluster_id: str
        """

        self._existing_cluster_id = existing_cluster_id

    @property
    def new_cluster(self):
        """Gets the new_cluster of this ClusterSpec.


        :return: The new_cluster of this ClusterSpec.
        :rtype: NewCluster
        """
        return self._new_cluster

    @new_cluster.setter
    def new_cluster(self, new_cluster):
        """Sets the new_cluster of this ClusterSpec.


        :param new_cluster: The new_cluster of this ClusterSpec.
        :type new_cluster: NewCluster
        """

        self._new_cluster = new_cluster

    @property
    def libraries(self):
        """Gets the libraries of this ClusterSpec.

        An optional list of libraries to be installed on the cluster that executes the job. The default value is an empty list.  # noqa: E501

        :return: The libraries of this ClusterSpec.
        :rtype: List[Library]
        """
        return self._libraries

    @libraries.setter
    def libraries(self, libraries):
        """Sets the libraries of this ClusterSpec.

        An optional list of libraries to be installed on the cluster that executes the job. The default value is an empty list.  # noqa: E501

        :param libraries: The libraries of this ClusterSpec.
        :type libraries: List[Library]
        """

        self._libraries = libraries
