# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.library import Library
from openapi_server.models.library_install_status import LibraryInstallStatus
from openapi_server import util

from openapi_server.models.library import Library  # noqa: E501
from openapi_server.models.library_install_status import LibraryInstallStatus  # noqa: E501

class LibraryFullStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, library=None, status=None, messages=None, is_library_for_all_clusters=None):  # noqa: E501
        """LibraryFullStatus - a model defined in OpenAPI

        :param library: The library of this LibraryFullStatus.  # noqa: E501
        :type library: Library
        :param status: The status of this LibraryFullStatus.  # noqa: E501
        :type status: LibraryInstallStatus
        :param messages: The messages of this LibraryFullStatus.  # noqa: E501
        :type messages: List[str]
        :param is_library_for_all_clusters: The is_library_for_all_clusters of this LibraryFullStatus.  # noqa: E501
        :type is_library_for_all_clusters: bool
        """
        self.openapi_types = {
            'library': Library,
            'status': LibraryInstallStatus,
            'messages': List[str],
            'is_library_for_all_clusters': bool
        }

        self.attribute_map = {
            'library': 'library',
            'status': 'status',
            'messages': 'messages',
            'is_library_for_all_clusters': 'is_library_for_all_clusters'
        }

        self._library = library
        self._status = status
        self._messages = messages
        self._is_library_for_all_clusters = is_library_for_all_clusters

    @classmethod
    def from_dict(cls, dikt) -> 'LibraryFullStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LibraryFullStatus of this LibraryFullStatus.  # noqa: E501
        :rtype: LibraryFullStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def library(self):
        """Gets the library of this LibraryFullStatus.


        :return: The library of this LibraryFullStatus.
        :rtype: Library
        """
        return self._library

    @library.setter
    def library(self, library):
        """Sets the library of this LibraryFullStatus.


        :param library: The library of this LibraryFullStatus.
        :type library: Library
        """

        self._library = library

    @property
    def status(self):
        """Gets the status of this LibraryFullStatus.


        :return: The status of this LibraryFullStatus.
        :rtype: LibraryInstallStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LibraryFullStatus.


        :param status: The status of this LibraryFullStatus.
        :type status: LibraryInstallStatus
        """

        self._status = status

    @property
    def messages(self):
        """Gets the messages of this LibraryFullStatus.

        All the info and warning messages that have occurred so far for this library.  # noqa: E501

        :return: The messages of this LibraryFullStatus.
        :rtype: List[str]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this LibraryFullStatus.

        All the info and warning messages that have occurred so far for this library.  # noqa: E501

        :param messages: The messages of this LibraryFullStatus.
        :type messages: List[str]
        """

        self._messages = messages

    @property
    def is_library_for_all_clusters(self):
        """Gets the is_library_for_all_clusters of this LibraryFullStatus.

        Whether the library was set to be installed on all clusters via the libraries UI.  # noqa: E501

        :return: The is_library_for_all_clusters of this LibraryFullStatus.
        :rtype: bool
        """
        return self._is_library_for_all_clusters

    @is_library_for_all_clusters.setter
    def is_library_for_all_clusters(self, is_library_for_all_clusters):
        """Sets the is_library_for_all_clusters of this LibraryFullStatus.

        Whether the library was set to be installed on all clusters via the libraries UI.  # noqa: E501

        :param is_library_for_all_clusters: The is_library_for_all_clusters of this LibraryFullStatus.
        :type is_library_for_all_clusters: bool
        """

        self._is_library_for_all_clusters = is_library_for_all_clusters
