# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.maven_library import MavenLibrary
from openapi_server.models.python_py_pi_library import PythonPyPiLibrary
from openapi_server.models.r_cran_library import RCranLibrary
from openapi_server import util

from openapi_server.models.maven_library import MavenLibrary  # noqa: E501
from openapi_server.models.python_py_pi_library import PythonPyPiLibrary  # noqa: E501
from openapi_server.models.r_cran_library import RCranLibrary  # noqa: E501

class Library(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, jar=None, egg=None, whl=None, pypi=None, maven=None, cran=None):  # noqa: E501
        """Library - a model defined in OpenAPI

        :param jar: The jar of this Library.  # noqa: E501
        :type jar: str
        :param egg: The egg of this Library.  # noqa: E501
        :type egg: str
        :param whl: The whl of this Library.  # noqa: E501
        :type whl: str
        :param pypi: The pypi of this Library.  # noqa: E501
        :type pypi: PythonPyPiLibrary
        :param maven: The maven of this Library.  # noqa: E501
        :type maven: MavenLibrary
        :param cran: The cran of this Library.  # noqa: E501
        :type cran: RCranLibrary
        """
        self.openapi_types = {
            'jar': str,
            'egg': str,
            'whl': str,
            'pypi': PythonPyPiLibrary,
            'maven': MavenLibrary,
            'cran': RCranLibrary
        }

        self.attribute_map = {
            'jar': 'jar',
            'egg': 'egg',
            'whl': 'whl',
            'pypi': 'pypi',
            'maven': 'maven',
            'cran': 'cran'
        }

        self._jar = jar
        self._egg = egg
        self._whl = whl
        self._pypi = pypi
        self._maven = maven
        self._cran = cran

    @classmethod
    def from_dict(cls, dikt) -> 'Library':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Library of this Library.  # noqa: E501
        :rtype: Library
        """
        return util.deserialize_model(dikt, cls)

    @property
    def jar(self):
        """Gets the jar of this Library.

        If jar, URI of the JAR to be installed. DBFS and S3 URIs are supported. For example: `{ \"jar\": \"dbfs:/mnt/databricks/library.jar\" }` or `{ \"jar\": \"s3://my-bucket/library.jar\" }`. If S3 is used, make sure the cluster has read access on the library. You may need to launch the cluster with an instance profile to access the S3 URI.  # noqa: E501

        :return: The jar of this Library.
        :rtype: str
        """
        return self._jar

    @jar.setter
    def jar(self, jar):
        """Sets the jar of this Library.

        If jar, URI of the JAR to be installed. DBFS and S3 URIs are supported. For example: `{ \"jar\": \"dbfs:/mnt/databricks/library.jar\" }` or `{ \"jar\": \"s3://my-bucket/library.jar\" }`. If S3 is used, make sure the cluster has read access on the library. You may need to launch the cluster with an instance profile to access the S3 URI.  # noqa: E501

        :param jar: The jar of this Library.
        :type jar: str
        """

        self._jar = jar

    @property
    def egg(self):
        """Gets the egg of this Library.

        If egg, URI of the egg to be installed. DBFS and S3 URIs are supported. For example: `{ \"egg\": \"dbfs:/my/egg\" }` or `{ \"egg\": \"s3://my-bucket/egg\" }`. If S3 is used, make sure the cluster has read access on the library. You may need to launch the cluster with an instance profile to access the S3 URI.  # noqa: E501

        :return: The egg of this Library.
        :rtype: str
        """
        return self._egg

    @egg.setter
    def egg(self, egg):
        """Sets the egg of this Library.

        If egg, URI of the egg to be installed. DBFS and S3 URIs are supported. For example: `{ \"egg\": \"dbfs:/my/egg\" }` or `{ \"egg\": \"s3://my-bucket/egg\" }`. If S3 is used, make sure the cluster has read access on the library. You may need to launch the cluster with an instance profile to access the S3 URI.  # noqa: E501

        :param egg: The egg of this Library.
        :type egg: str
        """

        self._egg = egg

    @property
    def whl(self):
        """Gets the whl of this Library.

        If whl, URI of the wheel or zipped wheels to be installed. DBFS and S3 URIs are supported. For example: `{ \"whl\": \"dbfs:/my/whl\" }` or `{ \"whl\": \"s3://my-bucket/whl\" }`. If S3 is used, make sure the cluster has read access on the library. You may need to launch the cluster with an instance profile to access the S3 URI. Also the wheel file name needs to use the [correct convention](https://www.python.org/dev/peps/pep-0427/#file-format). If zipped wheels are to be installed, the file name suffix should be `.wheelhouse.zip`.  # noqa: E501

        :return: The whl of this Library.
        :rtype: str
        """
        return self._whl

    @whl.setter
    def whl(self, whl):
        """Sets the whl of this Library.

        If whl, URI of the wheel or zipped wheels to be installed. DBFS and S3 URIs are supported. For example: `{ \"whl\": \"dbfs:/my/whl\" }` or `{ \"whl\": \"s3://my-bucket/whl\" }`. If S3 is used, make sure the cluster has read access on the library. You may need to launch the cluster with an instance profile to access the S3 URI. Also the wheel file name needs to use the [correct convention](https://www.python.org/dev/peps/pep-0427/#file-format). If zipped wheels are to be installed, the file name suffix should be `.wheelhouse.zip`.  # noqa: E501

        :param whl: The whl of this Library.
        :type whl: str
        """

        self._whl = whl

    @property
    def pypi(self):
        """Gets the pypi of this Library.


        :return: The pypi of this Library.
        :rtype: PythonPyPiLibrary
        """
        return self._pypi

    @pypi.setter
    def pypi(self, pypi):
        """Sets the pypi of this Library.


        :param pypi: The pypi of this Library.
        :type pypi: PythonPyPiLibrary
        """

        self._pypi = pypi

    @property
    def maven(self):
        """Gets the maven of this Library.


        :return: The maven of this Library.
        :rtype: MavenLibrary
        """
        return self._maven

    @maven.setter
    def maven(self, maven):
        """Sets the maven of this Library.


        :param maven: The maven of this Library.
        :type maven: MavenLibrary
        """

        self._maven = maven

    @property
    def cran(self):
        """Gets the cran of this Library.


        :return: The cran of this Library.
        :rtype: RCranLibrary
        """
        return self._cran

    @cran.setter
    def cran(self, cran):
        """Sets the cran of this Library.


        :param cran: The cran of this Library.
        :type cran: RCranLibrary
        """

        self._cran = cran
