# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.job_settings import JobSettings
from openapi_server import util

from openapi_server.models.job_settings import JobSettings  # noqa: E501

class JobsGet200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_id=None, creator_user_name=None, run_as_user_name=None, settings=None, created_time=None):  # noqa: E501
        """JobsGet200Response - a model defined in OpenAPI

        :param job_id: The job_id of this JobsGet200Response.  # noqa: E501
        :type job_id: int
        :param creator_user_name: The creator_user_name of this JobsGet200Response.  # noqa: E501
        :type creator_user_name: str
        :param run_as_user_name: The run_as_user_name of this JobsGet200Response.  # noqa: E501
        :type run_as_user_name: str
        :param settings: The settings of this JobsGet200Response.  # noqa: E501
        :type settings: JobSettings
        :param created_time: The created_time of this JobsGet200Response.  # noqa: E501
        :type created_time: int
        """
        self.openapi_types = {
            'job_id': int,
            'creator_user_name': str,
            'run_as_user_name': str,
            'settings': JobSettings,
            'created_time': int
        }

        self.attribute_map = {
            'job_id': 'job_id',
            'creator_user_name': 'creator_user_name',
            'run_as_user_name': 'run_as_user_name',
            'settings': 'settings',
            'created_time': 'created_time'
        }

        self._job_id = job_id
        self._creator_user_name = creator_user_name
        self._run_as_user_name = run_as_user_name
        self._settings = settings
        self._created_time = created_time

    @classmethod
    def from_dict(cls, dikt) -> 'JobsGet200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JobsGet_200_response of this JobsGet200Response.  # noqa: E501
        :rtype: JobsGet200Response
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self):
        """Gets the job_id of this JobsGet200Response.

        The canonical identifier for this job.  # noqa: E501

        :return: The job_id of this JobsGet200Response.
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this JobsGet200Response.

        The canonical identifier for this job.  # noqa: E501

        :param job_id: The job_id of this JobsGet200Response.
        :type job_id: int
        """

        self._job_id = job_id

    @property
    def creator_user_name(self):
        """Gets the creator_user_name of this JobsGet200Response.

        The creator user name. This field won’t be included in the response if the user has been deleted.  # noqa: E501

        :return: The creator_user_name of this JobsGet200Response.
        :rtype: str
        """
        return self._creator_user_name

    @creator_user_name.setter
    def creator_user_name(self, creator_user_name):
        """Sets the creator_user_name of this JobsGet200Response.

        The creator user name. This field won’t be included in the response if the user has been deleted.  # noqa: E501

        :param creator_user_name: The creator_user_name of this JobsGet200Response.
        :type creator_user_name: str
        """

        self._creator_user_name = creator_user_name

    @property
    def run_as_user_name(self):
        """Gets the run_as_user_name of this JobsGet200Response.

        The user name that the job runs as. `run_as_user_name` is based on the current job settings, and is set to the creator of the job if job access control is disabled, or the `is_owner` permission if job access control is enabled.  # noqa: E501

        :return: The run_as_user_name of this JobsGet200Response.
        :rtype: str
        """
        return self._run_as_user_name

    @run_as_user_name.setter
    def run_as_user_name(self, run_as_user_name):
        """Sets the run_as_user_name of this JobsGet200Response.

        The user name that the job runs as. `run_as_user_name` is based on the current job settings, and is set to the creator of the job if job access control is disabled, or the `is_owner` permission if job access control is enabled.  # noqa: E501

        :param run_as_user_name: The run_as_user_name of this JobsGet200Response.
        :type run_as_user_name: str
        """

        self._run_as_user_name = run_as_user_name

    @property
    def settings(self):
        """Gets the settings of this JobsGet200Response.


        :return: The settings of this JobsGet200Response.
        :rtype: JobSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this JobsGet200Response.


        :param settings: The settings of this JobsGet200Response.
        :type settings: JobSettings
        """

        self._settings = settings

    @property
    def created_time(self):
        """Gets the created_time of this JobsGet200Response.

        The time at which this job was created in epoch milliseconds (milliseconds since 1/1/1970 UTC).  # noqa: E501

        :return: The created_time of this JobsGet200Response.
        :rtype: int
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this JobsGet200Response.

        The time at which this job was created in epoch milliseconds (milliseconds since 1/1/1970 UTC).  # noqa: E501

        :param created_time: The created_time of this JobsGet200Response.
        :type created_time: int
        """

        self._created_time = created_time
