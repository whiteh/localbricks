# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.view_type import ViewType
from openapi_server import util

from openapi_server.models.view_type import ViewType  # noqa: E501

class ViewItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content=None, name=None, type=None):  # noqa: E501
        """ViewItem - a model defined in OpenAPI

        :param content: The content of this ViewItem.  # noqa: E501
        :type content: str
        :param name: The name of this ViewItem.  # noqa: E501
        :type name: str
        :param type: The type of this ViewItem.  # noqa: E501
        :type type: ViewType
        """
        self.openapi_types = {
            'content': str,
            'name': str,
            'type': ViewType
        }

        self.attribute_map = {
            'content': 'content',
            'name': 'name',
            'type': 'type'
        }

        self._content = content
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'ViewItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ViewItem of this ViewItem.  # noqa: E501
        :rtype: ViewItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this ViewItem.

        Content of the view.  # noqa: E501

        :return: The content of this ViewItem.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ViewItem.

        Content of the view.  # noqa: E501

        :param content: The content of this ViewItem.
        :type content: str
        """

        self._content = content

    @property
    def name(self):
        """Gets the name of this ViewItem.

        Name of the view item. In the case of code view, it would be the notebook’s name. In the case of dashboard view, it would be the dashboard’s name.  # noqa: E501

        :return: The name of this ViewItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ViewItem.

        Name of the view item. In the case of code view, it would be the notebook’s name. In the case of dashboard view, it would be the dashboard’s name.  # noqa: E501

        :param name: The name of this ViewItem.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this ViewItem.


        :return: The type of this ViewItem.
        :rtype: ViewType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ViewItem.


        :param type: The type of this ViewItem.
        :type type: ViewType
        """

        self._type = type
