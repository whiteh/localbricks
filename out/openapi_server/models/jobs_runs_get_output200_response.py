# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.notebook_output import NotebookOutput
from openapi_server.models.run import Run
from openapi_server import util

from openapi_server.models.notebook_output import NotebookOutput  # noqa: E501
from openapi_server.models.run import Run  # noqa: E501

class JobsRunsGetOutput200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, notebook_output=None, logs=None, logs_truncated=None, error=None, error_trace=None, metadata=None):  # noqa: E501
        """JobsRunsGetOutput200Response - a model defined in OpenAPI

        :param notebook_output: The notebook_output of this JobsRunsGetOutput200Response.  # noqa: E501
        :type notebook_output: NotebookOutput
        :param logs: The logs of this JobsRunsGetOutput200Response.  # noqa: E501
        :type logs: str
        :param logs_truncated: The logs_truncated of this JobsRunsGetOutput200Response.  # noqa: E501
        :type logs_truncated: bool
        :param error: The error of this JobsRunsGetOutput200Response.  # noqa: E501
        :type error: str
        :param error_trace: The error_trace of this JobsRunsGetOutput200Response.  # noqa: E501
        :type error_trace: str
        :param metadata: The metadata of this JobsRunsGetOutput200Response.  # noqa: E501
        :type metadata: Run
        """
        self.openapi_types = {
            'notebook_output': NotebookOutput,
            'logs': str,
            'logs_truncated': bool,
            'error': str,
            'error_trace': str,
            'metadata': Run
        }

        self.attribute_map = {
            'notebook_output': 'notebook_output',
            'logs': 'logs',
            'logs_truncated': 'logs_truncated',
            'error': 'error',
            'error_trace': 'error_trace',
            'metadata': 'metadata'
        }

        self._notebook_output = notebook_output
        self._logs = logs
        self._logs_truncated = logs_truncated
        self._error = error
        self._error_trace = error_trace
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt) -> 'JobsRunsGetOutput200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JobsRunsGetOutput_200_response of this JobsRunsGetOutput200Response.  # noqa: E501
        :rtype: JobsRunsGetOutput200Response
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notebook_output(self):
        """Gets the notebook_output of this JobsRunsGetOutput200Response.


        :return: The notebook_output of this JobsRunsGetOutput200Response.
        :rtype: NotebookOutput
        """
        return self._notebook_output

    @notebook_output.setter
    def notebook_output(self, notebook_output):
        """Sets the notebook_output of this JobsRunsGetOutput200Response.


        :param notebook_output: The notebook_output of this JobsRunsGetOutput200Response.
        :type notebook_output: NotebookOutput
        """

        self._notebook_output = notebook_output

    @property
    def logs(self):
        """Gets the logs of this JobsRunsGetOutput200Response.

        The output from tasks that write to cluster logs such as [SparkJarTask](https://docs.databricks.com/dev-tools/api/latest/jobs.html#/components/schemas/SparkJarTask) or [SparkPythonTask](https://docs.databricks.com/dev-tools/api/latest/jobs.html#/components/schemas/SparkPythonTask. Databricks restricts this API to return the last 5 MB of these logs. To return a larger result, use the [ClusterLogConf](https://docs.databricks.com/dev-tools/api/latest/clusters.html#clusterlogconf) field to configure log storage for the job cluster.  # noqa: E501

        :return: The logs of this JobsRunsGetOutput200Response.
        :rtype: str
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this JobsRunsGetOutput200Response.

        The output from tasks that write to cluster logs such as [SparkJarTask](https://docs.databricks.com/dev-tools/api/latest/jobs.html#/components/schemas/SparkJarTask) or [SparkPythonTask](https://docs.databricks.com/dev-tools/api/latest/jobs.html#/components/schemas/SparkPythonTask. Databricks restricts this API to return the last 5 MB of these logs. To return a larger result, use the [ClusterLogConf](https://docs.databricks.com/dev-tools/api/latest/clusters.html#clusterlogconf) field to configure log storage for the job cluster.  # noqa: E501

        :param logs: The logs of this JobsRunsGetOutput200Response.
        :type logs: str
        """

        self._logs = logs

    @property
    def logs_truncated(self):
        """Gets the logs_truncated of this JobsRunsGetOutput200Response.

        Whether the logs are truncated.  # noqa: E501

        :return: The logs_truncated of this JobsRunsGetOutput200Response.
        :rtype: bool
        """
        return self._logs_truncated

    @logs_truncated.setter
    def logs_truncated(self, logs_truncated):
        """Sets the logs_truncated of this JobsRunsGetOutput200Response.

        Whether the logs are truncated.  # noqa: E501

        :param logs_truncated: The logs_truncated of this JobsRunsGetOutput200Response.
        :type logs_truncated: bool
        """

        self._logs_truncated = logs_truncated

    @property
    def error(self):
        """Gets the error of this JobsRunsGetOutput200Response.

        An error message indicating why a task failed or why output is not available. The message is unstructured, and its exact format is subject to change.  # noqa: E501

        :return: The error of this JobsRunsGetOutput200Response.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this JobsRunsGetOutput200Response.

        An error message indicating why a task failed or why output is not available. The message is unstructured, and its exact format is subject to change.  # noqa: E501

        :param error: The error of this JobsRunsGetOutput200Response.
        :type error: str
        """

        self._error = error

    @property
    def error_trace(self):
        """Gets the error_trace of this JobsRunsGetOutput200Response.

        If there was an error executing the run, this field contains any available stack traces.  # noqa: E501

        :return: The error_trace of this JobsRunsGetOutput200Response.
        :rtype: str
        """
        return self._error_trace

    @error_trace.setter
    def error_trace(self, error_trace):
        """Sets the error_trace of this JobsRunsGetOutput200Response.

        If there was an error executing the run, this field contains any available stack traces.  # noqa: E501

        :param error_trace: The error_trace of this JobsRunsGetOutput200Response.
        :type error_trace: str
        """

        self._error_trace = error_trace

    @property
    def metadata(self):
        """Gets the metadata of this JobsRunsGetOutput200Response.


        :return: The metadata of this JobsRunsGetOutput200Response.
        :rtype: Run
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this JobsRunsGetOutput200Response.


        :param metadata: The metadata of this JobsRunsGetOutput200Response.
        :type metadata: Run
        """

        self._metadata = metadata
