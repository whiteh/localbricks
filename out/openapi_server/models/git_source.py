# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.git_snapshot import GitSnapshot
from openapi_server import util

from openapi_server.models.git_snapshot import GitSnapshot  # noqa: E501

class GitSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, git_url=None, git_provider=None, git_branch=None, git_tag=None, git_commit=None, git_snapshot=None):  # noqa: E501
        """GitSource - a model defined in OpenAPI

        :param git_url: The git_url of this GitSource.  # noqa: E501
        :type git_url: str
        :param git_provider: The git_provider of this GitSource.  # noqa: E501
        :type git_provider: str
        :param git_branch: The git_branch of this GitSource.  # noqa: E501
        :type git_branch: str
        :param git_tag: The git_tag of this GitSource.  # noqa: E501
        :type git_tag: str
        :param git_commit: The git_commit of this GitSource.  # noqa: E501
        :type git_commit: str
        :param git_snapshot: The git_snapshot of this GitSource.  # noqa: E501
        :type git_snapshot: GitSnapshot
        """
        self.openapi_types = {
            'git_url': str,
            'git_provider': str,
            'git_branch': str,
            'git_tag': str,
            'git_commit': str,
            'git_snapshot': GitSnapshot
        }

        self.attribute_map = {
            'git_url': 'git_url',
            'git_provider': 'git_provider',
            'git_branch': 'git_branch',
            'git_tag': 'git_tag',
            'git_commit': 'git_commit',
            'git_snapshot': 'git_snapshot'
        }

        self._git_url = git_url
        self._git_provider = git_provider
        self._git_branch = git_branch
        self._git_tag = git_tag
        self._git_commit = git_commit
        self._git_snapshot = git_snapshot

    @classmethod
    def from_dict(cls, dikt) -> 'GitSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GitSource of this GitSource.  # noqa: E501
        :rtype: GitSource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def git_url(self):
        """Gets the git_url of this GitSource.

        URL of the repository to be cloned by this job. The maximum length is 300 characters.  # noqa: E501

        :return: The git_url of this GitSource.
        :rtype: str
        """
        return self._git_url

    @git_url.setter
    def git_url(self, git_url):
        """Sets the git_url of this GitSource.

        URL of the repository to be cloned by this job. The maximum length is 300 characters.  # noqa: E501

        :param git_url: The git_url of this GitSource.
        :type git_url: str
        """

        self._git_url = git_url

    @property
    def git_provider(self):
        """Gets the git_provider of this GitSource.

        Unique identifier of the service used to host the Git repository. The value is case insensitive.  # noqa: E501

        :return: The git_provider of this GitSource.
        :rtype: str
        """
        return self._git_provider

    @git_provider.setter
    def git_provider(self, git_provider):
        """Sets the git_provider of this GitSource.

        Unique identifier of the service used to host the Git repository. The value is case insensitive.  # noqa: E501

        :param git_provider: The git_provider of this GitSource.
        :type git_provider: str
        """
        allowed_values = ["gitHub", "bitbucketCloud", "azureDevOpsServices", "gitHubEnterprise", "bitbucketServer", "gitLab", "gitLabEnterpriseEdition", "awsCodeCommit"]  # noqa: E501
        if git_provider not in allowed_values:
            raise ValueError(
                "Invalid value for `git_provider` ({0}), must be one of {1}"
                .format(git_provider, allowed_values)
            )

        self._git_provider = git_provider

    @property
    def git_branch(self):
        """Gets the git_branch of this GitSource.

        Name of the branch to be checked out and used by this job. This field cannot be specified in conjunction with git_tag or git_commit. The maximum length is 255 characters.  # noqa: E501

        :return: The git_branch of this GitSource.
        :rtype: str
        """
        return self._git_branch

    @git_branch.setter
    def git_branch(self, git_branch):
        """Sets the git_branch of this GitSource.

        Name of the branch to be checked out and used by this job. This field cannot be specified in conjunction with git_tag or git_commit. The maximum length is 255 characters.  # noqa: E501

        :param git_branch: The git_branch of this GitSource.
        :type git_branch: str
        """

        self._git_branch = git_branch

    @property
    def git_tag(self):
        """Gets the git_tag of this GitSource.

        Name of the tag to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_commit. The maximum length is 255 characters.  # noqa: E501

        :return: The git_tag of this GitSource.
        :rtype: str
        """
        return self._git_tag

    @git_tag.setter
    def git_tag(self, git_tag):
        """Sets the git_tag of this GitSource.

        Name of the tag to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_commit. The maximum length is 255 characters.  # noqa: E501

        :param git_tag: The git_tag of this GitSource.
        :type git_tag: str
        """

        self._git_tag = git_tag

    @property
    def git_commit(self):
        """Gets the git_commit of this GitSource.

        Commit to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_tag. The maximum length is 64 characters.  # noqa: E501

        :return: The git_commit of this GitSource.
        :rtype: str
        """
        return self._git_commit

    @git_commit.setter
    def git_commit(self, git_commit):
        """Sets the git_commit of this GitSource.

        Commit to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_tag. The maximum length is 64 characters.  # noqa: E501

        :param git_commit: The git_commit of this GitSource.
        :type git_commit: str
        """

        self._git_commit = git_commit

    @property
    def git_snapshot(self):
        """Gets the git_snapshot of this GitSource.


        :return: The git_snapshot of this GitSource.
        :rtype: GitSnapshot
        """
        return self._git_snapshot

    @git_snapshot.setter
    def git_snapshot(self, git_snapshot):
        """Sets the git_snapshot of this GitSource.


        :param git_snapshot: The git_snapshot of this GitSource.
        :type git_snapshot: GitSnapshot
        """

        self._git_snapshot = git_snapshot
