# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class SparkPythonTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, python_file=None, parameters=None):  # noqa: E501
        """SparkPythonTask - a model defined in OpenAPI

        :param python_file: The python_file of this SparkPythonTask.  # noqa: E501
        :type python_file: str
        :param parameters: The parameters of this SparkPythonTask.  # noqa: E501
        :type parameters: List[str]
        """
        self.openapi_types = {
            'python_file': str,
            'parameters': List[str]
        }

        self.attribute_map = {
            'python_file': 'python_file',
            'parameters': 'parameters'
        }

        self._python_file = python_file
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt) -> 'SparkPythonTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SparkPythonTask of this SparkPythonTask.  # noqa: E501
        :rtype: SparkPythonTask
        """
        return util.deserialize_model(dikt, cls)

    @property
    def python_file(self):
        """Gets the python_file of this SparkPythonTask.

        The URI of the Python file to be executed. DBFS and S3 paths are supported. This field is required.  # noqa: E501

        :return: The python_file of this SparkPythonTask.
        :rtype: str
        """
        return self._python_file

    @python_file.setter
    def python_file(self, python_file):
        """Sets the python_file of this SparkPythonTask.

        The URI of the Python file to be executed. DBFS and S3 paths are supported. This field is required.  # noqa: E501

        :param python_file: The python_file of this SparkPythonTask.
        :type python_file: str
        """
        if python_file is None:
            raise ValueError("Invalid value for `python_file`, must not be `None`")  # noqa: E501

        self._python_file = python_file

    @property
    def parameters(self):
        """Gets the parameters of this SparkPythonTask.

        Command line parameters passed to the Python file.  Use [Task parameter variables](https://docs.databricks.com/jobs.html#parameter-variables) to set parameters containing information about job runs.  # noqa: E501

        :return: The parameters of this SparkPythonTask.
        :rtype: List[str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this SparkPythonTask.

        Command line parameters passed to the Python file.  Use [Task parameter variables](https://docs.databricks.com/jobs.html#parameter-variables) to set parameters containing information about job runs.  # noqa: E501

        :param parameters: The parameters of this SparkPythonTask.
        :type parameters: List[str]
        """

        self._parameters = parameters
