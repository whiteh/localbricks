# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.job_email_notifications import JobEmailNotifications
from openapi_server.models.library import Library
from openapi_server.models.new_cluster import NewCluster
from openapi_server.models.notebook_task import NotebookTask
from openapi_server.models.pipeline_task import PipelineTask
from openapi_server.models.python_wheel_task import PythonWheelTask
from openapi_server.models.spark_jar_task import SparkJarTask
from openapi_server.models.spark_python_task import SparkPythonTask
from openapi_server.models.spark_submit_task import SparkSubmitTask
from openapi_server.models.task_dependencies_inner import TaskDependenciesInner
import re
from openapi_server import util

from openapi_server.models.job_email_notifications import JobEmailNotifications  # noqa: E501
from openapi_server.models.library import Library  # noqa: E501
from openapi_server.models.new_cluster import NewCluster  # noqa: E501
from openapi_server.models.notebook_task import NotebookTask  # noqa: E501
from openapi_server.models.pipeline_task import PipelineTask  # noqa: E501
from openapi_server.models.python_wheel_task import PythonWheelTask  # noqa: E501
from openapi_server.models.spark_jar_task import SparkJarTask  # noqa: E501
from openapi_server.models.spark_python_task import SparkPythonTask  # noqa: E501
from openapi_server.models.spark_submit_task import SparkSubmitTask  # noqa: E501
from openapi_server.models.task_dependencies_inner import TaskDependenciesInner  # noqa: E501
import re  # noqa: E501

class JobTaskSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, task_key=None, description=None, depends_on=None, existing_cluster_id=None, new_cluster=None, job_cluster_key=None, notebook_task=None, spark_jar_task=None, spark_python_task=None, spark_submit_task=None, pipeline_task=None, python_wheel_task=None, libraries=None, email_notifications=None, timeout_seconds=None, max_retries=None, min_retry_interval_millis=None, retry_on_timeout=None):  # noqa: E501
        """JobTaskSettings - a model defined in OpenAPI

        :param task_key: The task_key of this JobTaskSettings.  # noqa: E501
        :type task_key: str
        :param description: The description of this JobTaskSettings.  # noqa: E501
        :type description: str
        :param depends_on: The depends_on of this JobTaskSettings.  # noqa: E501
        :type depends_on: List[TaskDependenciesInner]
        :param existing_cluster_id: The existing_cluster_id of this JobTaskSettings.  # noqa: E501
        :type existing_cluster_id: str
        :param new_cluster: The new_cluster of this JobTaskSettings.  # noqa: E501
        :type new_cluster: NewCluster
        :param job_cluster_key: The job_cluster_key of this JobTaskSettings.  # noqa: E501
        :type job_cluster_key: str
        :param notebook_task: The notebook_task of this JobTaskSettings.  # noqa: E501
        :type notebook_task: NotebookTask
        :param spark_jar_task: The spark_jar_task of this JobTaskSettings.  # noqa: E501
        :type spark_jar_task: SparkJarTask
        :param spark_python_task: The spark_python_task of this JobTaskSettings.  # noqa: E501
        :type spark_python_task: SparkPythonTask
        :param spark_submit_task: The spark_submit_task of this JobTaskSettings.  # noqa: E501
        :type spark_submit_task: SparkSubmitTask
        :param pipeline_task: The pipeline_task of this JobTaskSettings.  # noqa: E501
        :type pipeline_task: PipelineTask
        :param python_wheel_task: The python_wheel_task of this JobTaskSettings.  # noqa: E501
        :type python_wheel_task: PythonWheelTask
        :param libraries: The libraries of this JobTaskSettings.  # noqa: E501
        :type libraries: List[Library]
        :param email_notifications: The email_notifications of this JobTaskSettings.  # noqa: E501
        :type email_notifications: JobEmailNotifications
        :param timeout_seconds: The timeout_seconds of this JobTaskSettings.  # noqa: E501
        :type timeout_seconds: int
        :param max_retries: The max_retries of this JobTaskSettings.  # noqa: E501
        :type max_retries: int
        :param min_retry_interval_millis: The min_retry_interval_millis of this JobTaskSettings.  # noqa: E501
        :type min_retry_interval_millis: int
        :param retry_on_timeout: The retry_on_timeout of this JobTaskSettings.  # noqa: E501
        :type retry_on_timeout: bool
        """
        self.openapi_types = {
            'task_key': str,
            'description': str,
            'depends_on': List[TaskDependenciesInner],
            'existing_cluster_id': str,
            'new_cluster': NewCluster,
            'job_cluster_key': str,
            'notebook_task': NotebookTask,
            'spark_jar_task': SparkJarTask,
            'spark_python_task': SparkPythonTask,
            'spark_submit_task': SparkSubmitTask,
            'pipeline_task': PipelineTask,
            'python_wheel_task': PythonWheelTask,
            'libraries': List[Library],
            'email_notifications': JobEmailNotifications,
            'timeout_seconds': int,
            'max_retries': int,
            'min_retry_interval_millis': int,
            'retry_on_timeout': bool
        }

        self.attribute_map = {
            'task_key': 'task_key',
            'description': 'description',
            'depends_on': 'depends_on',
            'existing_cluster_id': 'existing_cluster_id',
            'new_cluster': 'new_cluster',
            'job_cluster_key': 'job_cluster_key',
            'notebook_task': 'notebook_task',
            'spark_jar_task': 'spark_jar_task',
            'spark_python_task': 'spark_python_task',
            'spark_submit_task': 'spark_submit_task',
            'pipeline_task': 'pipeline_task',
            'python_wheel_task': 'python_wheel_task',
            'libraries': 'libraries',
            'email_notifications': 'email_notifications',
            'timeout_seconds': 'timeout_seconds',
            'max_retries': 'max_retries',
            'min_retry_interval_millis': 'min_retry_interval_millis',
            'retry_on_timeout': 'retry_on_timeout'
        }

        self._task_key = task_key
        self._description = description
        self._depends_on = depends_on
        self._existing_cluster_id = existing_cluster_id
        self._new_cluster = new_cluster
        self._job_cluster_key = job_cluster_key
        self._notebook_task = notebook_task
        self._spark_jar_task = spark_jar_task
        self._spark_python_task = spark_python_task
        self._spark_submit_task = spark_submit_task
        self._pipeline_task = pipeline_task
        self._python_wheel_task = python_wheel_task
        self._libraries = libraries
        self._email_notifications = email_notifications
        self._timeout_seconds = timeout_seconds
        self._max_retries = max_retries
        self._min_retry_interval_millis = min_retry_interval_millis
        self._retry_on_timeout = retry_on_timeout

    @classmethod
    def from_dict(cls, dikt) -> 'JobTaskSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JobTaskSettings of this JobTaskSettings.  # noqa: E501
        :rtype: JobTaskSettings
        """
        return util.deserialize_model(dikt, cls)

    @property
    def task_key(self):
        """Gets the task_key of this JobTaskSettings.

        A unique name for the task. This field is used to refer to this task from other tasks. This field is required and must be unique within its parent job. On Update or Reset, this field is used to reference the tasks to be updated or reset. The maximum length is 100 characters.  # noqa: E501

        :return: The task_key of this JobTaskSettings.
        :rtype: str
        """
        return self._task_key

    @task_key.setter
    def task_key(self, task_key):
        """Sets the task_key of this JobTaskSettings.

        A unique name for the task. This field is used to refer to this task from other tasks. This field is required and must be unique within its parent job. On Update or Reset, this field is used to reference the tasks to be updated or reset. The maximum length is 100 characters.  # noqa: E501

        :param task_key: The task_key of this JobTaskSettings.
        :type task_key: str
        """
        if task_key is None:
            raise ValueError("Invalid value for `task_key`, must not be `None`")  # noqa: E501
        if task_key is not None and len(task_key) > 100:
            raise ValueError("Invalid value for `task_key`, length must be less than or equal to `100`")  # noqa: E501
        if task_key is not None and len(task_key) < 1:
            raise ValueError("Invalid value for `task_key`, length must be greater than or equal to `1`")  # noqa: E501
        if task_key is not None and not re.search(r'^[\w\-]+$', task_key):  # noqa: E501
            raise ValueError("Invalid value for `task_key`, must be a follow pattern or equal to `/^[\w\-]+$/`")  # noqa: E501

        self._task_key = task_key

    @property
    def description(self):
        """Gets the description of this JobTaskSettings.

        An optional description for this task. The maximum length is 4096 bytes.  # noqa: E501

        :return: The description of this JobTaskSettings.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this JobTaskSettings.

        An optional description for this task. The maximum length is 4096 bytes.  # noqa: E501

        :param description: The description of this JobTaskSettings.
        :type description: str
        """
        if description is not None and len(description) > 4096:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4096`")  # noqa: E501

        self._description = description

    @property
    def depends_on(self):
        """Gets the depends_on of this JobTaskSettings.

        An optional array of objects specifying the dependency graph of the task. All tasks specified in this field must complete successfully before executing this task. The key is `task_key`, and the value is the name assigned to the dependent task. This field is required when a job consists of more than one task.  # noqa: E501

        :return: The depends_on of this JobTaskSettings.
        :rtype: List[TaskDependenciesInner]
        """
        return self._depends_on

    @depends_on.setter
    def depends_on(self, depends_on):
        """Sets the depends_on of this JobTaskSettings.

        An optional array of objects specifying the dependency graph of the task. All tasks specified in this field must complete successfully before executing this task. The key is `task_key`, and the value is the name assigned to the dependent task. This field is required when a job consists of more than one task.  # noqa: E501

        :param depends_on: The depends_on of this JobTaskSettings.
        :type depends_on: List[TaskDependenciesInner]
        """

        self._depends_on = depends_on

    @property
    def existing_cluster_id(self):
        """Gets the existing_cluster_id of this JobTaskSettings.

        If existing_cluster_id, the ID of an existing cluster that is used for all runs of this task. When running tasks on an existing cluster, you may need to manually restart the cluster if it stops responding. We suggest running jobs on new clusters for greater reliability.  # noqa: E501

        :return: The existing_cluster_id of this JobTaskSettings.
        :rtype: str
        """
        return self._existing_cluster_id

    @existing_cluster_id.setter
    def existing_cluster_id(self, existing_cluster_id):
        """Sets the existing_cluster_id of this JobTaskSettings.

        If existing_cluster_id, the ID of an existing cluster that is used for all runs of this task. When running tasks on an existing cluster, you may need to manually restart the cluster if it stops responding. We suggest running jobs on new clusters for greater reliability.  # noqa: E501

        :param existing_cluster_id: The existing_cluster_id of this JobTaskSettings.
        :type existing_cluster_id: str
        """

        self._existing_cluster_id = existing_cluster_id

    @property
    def new_cluster(self):
        """Gets the new_cluster of this JobTaskSettings.


        :return: The new_cluster of this JobTaskSettings.
        :rtype: NewCluster
        """
        return self._new_cluster

    @new_cluster.setter
    def new_cluster(self, new_cluster):
        """Sets the new_cluster of this JobTaskSettings.


        :param new_cluster: The new_cluster of this JobTaskSettings.
        :type new_cluster: NewCluster
        """

        self._new_cluster = new_cluster

    @property
    def job_cluster_key(self):
        """Gets the job_cluster_key of this JobTaskSettings.

        If job_cluster_key, this task is executed reusing the cluster specified in `job.settings.job_clusters`.  # noqa: E501

        :return: The job_cluster_key of this JobTaskSettings.
        :rtype: str
        """
        return self._job_cluster_key

    @job_cluster_key.setter
    def job_cluster_key(self, job_cluster_key):
        """Sets the job_cluster_key of this JobTaskSettings.

        If job_cluster_key, this task is executed reusing the cluster specified in `job.settings.job_clusters`.  # noqa: E501

        :param job_cluster_key: The job_cluster_key of this JobTaskSettings.
        :type job_cluster_key: str
        """
        if job_cluster_key is not None and len(job_cluster_key) > 100:
            raise ValueError("Invalid value for `job_cluster_key`, length must be less than or equal to `100`")  # noqa: E501
        if job_cluster_key is not None and len(job_cluster_key) < 1:
            raise ValueError("Invalid value for `job_cluster_key`, length must be greater than or equal to `1`")  # noqa: E501
        if job_cluster_key is not None and not re.search(r'^[\w\-]+$', job_cluster_key):  # noqa: E501
            raise ValueError("Invalid value for `job_cluster_key`, must be a follow pattern or equal to `/^[\w\-]+$/`")  # noqa: E501

        self._job_cluster_key = job_cluster_key

    @property
    def notebook_task(self):
        """Gets the notebook_task of this JobTaskSettings.


        :return: The notebook_task of this JobTaskSettings.
        :rtype: NotebookTask
        """
        return self._notebook_task

    @notebook_task.setter
    def notebook_task(self, notebook_task):
        """Sets the notebook_task of this JobTaskSettings.


        :param notebook_task: The notebook_task of this JobTaskSettings.
        :type notebook_task: NotebookTask
        """

        self._notebook_task = notebook_task

    @property
    def spark_jar_task(self):
        """Gets the spark_jar_task of this JobTaskSettings.


        :return: The spark_jar_task of this JobTaskSettings.
        :rtype: SparkJarTask
        """
        return self._spark_jar_task

    @spark_jar_task.setter
    def spark_jar_task(self, spark_jar_task):
        """Sets the spark_jar_task of this JobTaskSettings.


        :param spark_jar_task: The spark_jar_task of this JobTaskSettings.
        :type spark_jar_task: SparkJarTask
        """

        self._spark_jar_task = spark_jar_task

    @property
    def spark_python_task(self):
        """Gets the spark_python_task of this JobTaskSettings.


        :return: The spark_python_task of this JobTaskSettings.
        :rtype: SparkPythonTask
        """
        return self._spark_python_task

    @spark_python_task.setter
    def spark_python_task(self, spark_python_task):
        """Sets the spark_python_task of this JobTaskSettings.


        :param spark_python_task: The spark_python_task of this JobTaskSettings.
        :type spark_python_task: SparkPythonTask
        """

        self._spark_python_task = spark_python_task

    @property
    def spark_submit_task(self):
        """Gets the spark_submit_task of this JobTaskSettings.


        :return: The spark_submit_task of this JobTaskSettings.
        :rtype: SparkSubmitTask
        """
        return self._spark_submit_task

    @spark_submit_task.setter
    def spark_submit_task(self, spark_submit_task):
        """Sets the spark_submit_task of this JobTaskSettings.


        :param spark_submit_task: The spark_submit_task of this JobTaskSettings.
        :type spark_submit_task: SparkSubmitTask
        """

        self._spark_submit_task = spark_submit_task

    @property
    def pipeline_task(self):
        """Gets the pipeline_task of this JobTaskSettings.


        :return: The pipeline_task of this JobTaskSettings.
        :rtype: PipelineTask
        """
        return self._pipeline_task

    @pipeline_task.setter
    def pipeline_task(self, pipeline_task):
        """Sets the pipeline_task of this JobTaskSettings.


        :param pipeline_task: The pipeline_task of this JobTaskSettings.
        :type pipeline_task: PipelineTask
        """

        self._pipeline_task = pipeline_task

    @property
    def python_wheel_task(self):
        """Gets the python_wheel_task of this JobTaskSettings.


        :return: The python_wheel_task of this JobTaskSettings.
        :rtype: PythonWheelTask
        """
        return self._python_wheel_task

    @python_wheel_task.setter
    def python_wheel_task(self, python_wheel_task):
        """Sets the python_wheel_task of this JobTaskSettings.


        :param python_wheel_task: The python_wheel_task of this JobTaskSettings.
        :type python_wheel_task: PythonWheelTask
        """

        self._python_wheel_task = python_wheel_task

    @property
    def libraries(self):
        """Gets the libraries of this JobTaskSettings.

        An optional list of libraries to be installed on the cluster that executes the task. The default value is an empty list.  # noqa: E501

        :return: The libraries of this JobTaskSettings.
        :rtype: List[Library]
        """
        return self._libraries

    @libraries.setter
    def libraries(self, libraries):
        """Sets the libraries of this JobTaskSettings.

        An optional list of libraries to be installed on the cluster that executes the task. The default value is an empty list.  # noqa: E501

        :param libraries: The libraries of this JobTaskSettings.
        :type libraries: List[Library]
        """

        self._libraries = libraries

    @property
    def email_notifications(self):
        """Gets the email_notifications of this JobTaskSettings.


        :return: The email_notifications of this JobTaskSettings.
        :rtype: JobEmailNotifications
        """
        return self._email_notifications

    @email_notifications.setter
    def email_notifications(self, email_notifications):
        """Sets the email_notifications of this JobTaskSettings.


        :param email_notifications: The email_notifications of this JobTaskSettings.
        :type email_notifications: JobEmailNotifications
        """

        self._email_notifications = email_notifications

    @property
    def timeout_seconds(self):
        """Gets the timeout_seconds of this JobTaskSettings.

        An optional timeout applied to each run of this job task. The default behavior is to have no timeout.  # noqa: E501

        :return: The timeout_seconds of this JobTaskSettings.
        :rtype: int
        """
        return self._timeout_seconds

    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds):
        """Sets the timeout_seconds of this JobTaskSettings.

        An optional timeout applied to each run of this job task. The default behavior is to have no timeout.  # noqa: E501

        :param timeout_seconds: The timeout_seconds of this JobTaskSettings.
        :type timeout_seconds: int
        """

        self._timeout_seconds = timeout_seconds

    @property
    def max_retries(self):
        """Gets the max_retries of this JobTaskSettings.

        An optional maximum number of times to retry an unsuccessful run. A run is considered to be unsuccessful if it completes with the `FAILED` result_state or `INTERNAL_ERROR` `life_cycle_state`. The value -1 means to retry indefinitely and the value 0 means to never retry. The default behavior is to never retry.  # noqa: E501

        :return: The max_retries of this JobTaskSettings.
        :rtype: int
        """
        return self._max_retries

    @max_retries.setter
    def max_retries(self, max_retries):
        """Sets the max_retries of this JobTaskSettings.

        An optional maximum number of times to retry an unsuccessful run. A run is considered to be unsuccessful if it completes with the `FAILED` result_state or `INTERNAL_ERROR` `life_cycle_state`. The value -1 means to retry indefinitely and the value 0 means to never retry. The default behavior is to never retry.  # noqa: E501

        :param max_retries: The max_retries of this JobTaskSettings.
        :type max_retries: int
        """

        self._max_retries = max_retries

    @property
    def min_retry_interval_millis(self):
        """Gets the min_retry_interval_millis of this JobTaskSettings.

        An optional minimal interval in milliseconds between the start of the failed run and the subsequent retry run. The default behavior is that unsuccessful runs are immediately retried.  # noqa: E501

        :return: The min_retry_interval_millis of this JobTaskSettings.
        :rtype: int
        """
        return self._min_retry_interval_millis

    @min_retry_interval_millis.setter
    def min_retry_interval_millis(self, min_retry_interval_millis):
        """Sets the min_retry_interval_millis of this JobTaskSettings.

        An optional minimal interval in milliseconds between the start of the failed run and the subsequent retry run. The default behavior is that unsuccessful runs are immediately retried.  # noqa: E501

        :param min_retry_interval_millis: The min_retry_interval_millis of this JobTaskSettings.
        :type min_retry_interval_millis: int
        """

        self._min_retry_interval_millis = min_retry_interval_millis

    @property
    def retry_on_timeout(self):
        """Gets the retry_on_timeout of this JobTaskSettings.

        An optional policy to specify whether to retry a task when it times out. The default behavior is to not retry on timeout.  # noqa: E501

        :return: The retry_on_timeout of this JobTaskSettings.
        :rtype: bool
        """
        return self._retry_on_timeout

    @retry_on_timeout.setter
    def retry_on_timeout(self, retry_on_timeout):
        """Sets the retry_on_timeout of this JobTaskSettings.

        An optional policy to specify whether to retry a task when it times out. The default behavior is to not retry on timeout.  # noqa: E501

        :param retry_on_timeout: The retry_on_timeout of this JobTaskSettings.
        :type retry_on_timeout: bool
        """

        self._retry_on_timeout = retry_on_timeout
