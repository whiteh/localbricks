# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.run_state import RunState
from openapi_server import util

from openapi_server.models.run_state import RunState  # noqa: E501

class RepairHistoryItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, start_time=None, end_time=None, state=None, id=None, task_run_ids=None):  # noqa: E501
        """RepairHistoryItem - a model defined in OpenAPI

        :param type: The type of this RepairHistoryItem.  # noqa: E501
        :type type: str
        :param start_time: The start_time of this RepairHistoryItem.  # noqa: E501
        :type start_time: int
        :param end_time: The end_time of this RepairHistoryItem.  # noqa: E501
        :type end_time: int
        :param state: The state of this RepairHistoryItem.  # noqa: E501
        :type state: RunState
        :param id: The id of this RepairHistoryItem.  # noqa: E501
        :type id: int
        :param task_run_ids: The task_run_ids of this RepairHistoryItem.  # noqa: E501
        :type task_run_ids: List[int]
        """
        self.openapi_types = {
            'type': str,
            'start_time': int,
            'end_time': int,
            'state': RunState,
            'id': int,
            'task_run_ids': List[int]
        }

        self.attribute_map = {
            'type': 'type',
            'start_time': 'start_time',
            'end_time': 'end_time',
            'state': 'state',
            'id': 'id',
            'task_run_ids': 'task_run_ids'
        }

        self._type = type
        self._start_time = start_time
        self._end_time = end_time
        self._state = state
        self._id = id
        self._task_run_ids = task_run_ids

    @classmethod
    def from_dict(cls, dikt) -> 'RepairHistoryItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RepairHistoryItem of this RepairHistoryItem.  # noqa: E501
        :rtype: RepairHistoryItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this RepairHistoryItem.

        The repair history item type. Indicates whether a run is the original run or a repair run.  # noqa: E501

        :return: The type of this RepairHistoryItem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RepairHistoryItem.

        The repair history item type. Indicates whether a run is the original run or a repair run.  # noqa: E501

        :param type: The type of this RepairHistoryItem.
        :type type: str
        """
        allowed_values = ["ORIGINAL", "REPAIR"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def start_time(self):
        """Gets the start_time of this RepairHistoryItem.

        The start time of the (repaired) run.  # noqa: E501

        :return: The start_time of this RepairHistoryItem.
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this RepairHistoryItem.

        The start time of the (repaired) run.  # noqa: E501

        :param start_time: The start_time of this RepairHistoryItem.
        :type start_time: int
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this RepairHistoryItem.

        The end time of the (repaired) run.  # noqa: E501

        :return: The end_time of this RepairHistoryItem.
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this RepairHistoryItem.

        The end time of the (repaired) run.  # noqa: E501

        :param end_time: The end_time of this RepairHistoryItem.
        :type end_time: int
        """

        self._end_time = end_time

    @property
    def state(self):
        """Gets the state of this RepairHistoryItem.


        :return: The state of this RepairHistoryItem.
        :rtype: RunState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RepairHistoryItem.


        :param state: The state of this RepairHistoryItem.
        :type state: RunState
        """

        self._state = state

    @property
    def id(self):
        """Gets the id of this RepairHistoryItem.

        The ID of the repair. Only returned for the items that represent a repair in `repair_history`.  # noqa: E501

        :return: The id of this RepairHistoryItem.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RepairHistoryItem.

        The ID of the repair. Only returned for the items that represent a repair in `repair_history`.  # noqa: E501

        :param id: The id of this RepairHistoryItem.
        :type id: int
        """

        self._id = id

    @property
    def task_run_ids(self):
        """Gets the task_run_ids of this RepairHistoryItem.

        The run IDs of the task runs that ran as part of this repair history item.  # noqa: E501

        :return: The task_run_ids of this RepairHistoryItem.
        :rtype: List[int]
        """
        return self._task_run_ids

    @task_run_ids.setter
    def task_run_ids(self, task_run_ids):
        """Sets the task_run_ids of this RepairHistoryItem.

        The run IDs of the task runs that ran as part of this repair history item.  # noqa: E501

        :param task_run_ids: The task_run_ids of this RepairHistoryItem.
        :type task_run_ids: List[int]
        """

        self._task_run_ids = task_run_ids
