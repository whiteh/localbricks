# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ClusterInstance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_id=None, spark_context_id=None):  # noqa: E501
        """ClusterInstance - a model defined in OpenAPI

        :param cluster_id: The cluster_id of this ClusterInstance.  # noqa: E501
        :type cluster_id: str
        :param spark_context_id: The spark_context_id of this ClusterInstance.  # noqa: E501
        :type spark_context_id: str
        """
        self.openapi_types = {
            'cluster_id': str,
            'spark_context_id': str
        }

        self.attribute_map = {
            'cluster_id': 'cluster_id',
            'spark_context_id': 'spark_context_id'
        }

        self._cluster_id = cluster_id
        self._spark_context_id = spark_context_id

    @classmethod
    def from_dict(cls, dikt) -> 'ClusterInstance':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ClusterInstance of this ClusterInstance.  # noqa: E501
        :rtype: ClusterInstance
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_id(self):
        """Gets the cluster_id of this ClusterInstance.

        The canonical identifier for the cluster used by a run. This field is always available for runs on existing clusters. For runs on new clusters, it becomes available once the cluster is created. This value can be used to view logs by browsing to `/#setting/sparkui/$cluster_id/driver-logs`. The logs continue to be available after the run completes.  The response won’t include this field if the identifier is not available yet.  # noqa: E501

        :return: The cluster_id of this ClusterInstance.
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this ClusterInstance.

        The canonical identifier for the cluster used by a run. This field is always available for runs on existing clusters. For runs on new clusters, it becomes available once the cluster is created. This value can be used to view logs by browsing to `/#setting/sparkui/$cluster_id/driver-logs`. The logs continue to be available after the run completes.  The response won’t include this field if the identifier is not available yet.  # noqa: E501

        :param cluster_id: The cluster_id of this ClusterInstance.
        :type cluster_id: str
        """

        self._cluster_id = cluster_id

    @property
    def spark_context_id(self):
        """Gets the spark_context_id of this ClusterInstance.

        The canonical identifier for the Spark context used by a run. This field is filled in once the run begins execution. This value can be used to view the Spark UI by browsing to `/#setting/sparkui/$cluster_id/$spark_context_id`. The Spark UI continues to be available after the run has completed.  The response won’t include this field if the identifier is not available yet.  # noqa: E501

        :return: The spark_context_id of this ClusterInstance.
        :rtype: str
        """
        return self._spark_context_id

    @spark_context_id.setter
    def spark_context_id(self, spark_context_id):
        """Sets the spark_context_id of this ClusterInstance.

        The canonical identifier for the Spark context used by a run. This field is filled in once the run begins execution. This value can be used to view the Spark UI by browsing to `/#setting/sparkui/$cluster_id/$spark_context_id`. The Spark UI continues to be available after the run has completed.  The response won’t include this field if the identifier is not available yet.  # noqa: E501

        :param spark_context_id: The spark_context_id of this ClusterInstance.
        :type spark_context_id: str
        """

        self._spark_context_id = spark_context_id
