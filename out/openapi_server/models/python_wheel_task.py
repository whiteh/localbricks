# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class PythonWheelTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, package_name=None, entry_point=None, parameters=None, named_parameters=None):  # noqa: E501
        """PythonWheelTask - a model defined in OpenAPI

        :param package_name: The package_name of this PythonWheelTask.  # noqa: E501
        :type package_name: str
        :param entry_point: The entry_point of this PythonWheelTask.  # noqa: E501
        :type entry_point: str
        :param parameters: The parameters of this PythonWheelTask.  # noqa: E501
        :type parameters: List[str]
        :param named_parameters: The named_parameters of this PythonWheelTask.  # noqa: E501
        :type named_parameters: object
        """
        self.openapi_types = {
            'package_name': str,
            'entry_point': str,
            'parameters': List[str],
            'named_parameters': object
        }

        self.attribute_map = {
            'package_name': 'package_name',
            'entry_point': 'entry_point',
            'parameters': 'parameters',
            'named_parameters': 'named_parameters'
        }

        self._package_name = package_name
        self._entry_point = entry_point
        self._parameters = parameters
        self._named_parameters = named_parameters

    @classmethod
    def from_dict(cls, dikt) -> 'PythonWheelTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PythonWheelTask of this PythonWheelTask.  # noqa: E501
        :rtype: PythonWheelTask
        """
        return util.deserialize_model(dikt, cls)

    @property
    def package_name(self):
        """Gets the package_name of this PythonWheelTask.

        Name of the package to execute  # noqa: E501

        :return: The package_name of this PythonWheelTask.
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this PythonWheelTask.

        Name of the package to execute  # noqa: E501

        :param package_name: The package_name of this PythonWheelTask.
        :type package_name: str
        """

        self._package_name = package_name

    @property
    def entry_point(self):
        """Gets the entry_point of this PythonWheelTask.

        Named entry point to use, if it does not exist in the metadata of the package it executes the function from the package directly using `$packageName.$entryPoint()`  # noqa: E501

        :return: The entry_point of this PythonWheelTask.
        :rtype: str
        """
        return self._entry_point

    @entry_point.setter
    def entry_point(self, entry_point):
        """Sets the entry_point of this PythonWheelTask.

        Named entry point to use, if it does not exist in the metadata of the package it executes the function from the package directly using `$packageName.$entryPoint()`  # noqa: E501

        :param entry_point: The entry_point of this PythonWheelTask.
        :type entry_point: str
        """

        self._entry_point = entry_point

    @property
    def parameters(self):
        """Gets the parameters of this PythonWheelTask.

        Command-line parameters passed to Python wheel task. Leave it empty if `named_parameters` is not null.  # noqa: E501

        :return: The parameters of this PythonWheelTask.
        :rtype: List[str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this PythonWheelTask.

        Command-line parameters passed to Python wheel task. Leave it empty if `named_parameters` is not null.  # noqa: E501

        :param parameters: The parameters of this PythonWheelTask.
        :type parameters: List[str]
        """

        self._parameters = parameters

    @property
    def named_parameters(self):
        """Gets the named_parameters of this PythonWheelTask.

        Command-line parameters passed to Python wheel task in the form of `[\"--name=task\", \"--data=dbfs:/path/to/data.json\"]`. Leave it empty if `parameters` is not null.  # noqa: E501

        :return: The named_parameters of this PythonWheelTask.
        :rtype: object
        """
        return self._named_parameters

    @named_parameters.setter
    def named_parameters(self, named_parameters):
        """Sets the named_parameters of this PythonWheelTask.

        Command-line parameters passed to Python wheel task in the form of `[\"--name=task\", \"--data=dbfs:/path/to/data.json\"]`. Leave it empty if `parameters` is not null.  # noqa: E501

        :param named_parameters: The named_parameters of this PythonWheelTask.
        :type named_parameters: object
        """

        self._named_parameters = named_parameters
