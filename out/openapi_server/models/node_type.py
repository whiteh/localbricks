# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.cluster_cloud_provider_node_info import ClusterCloudProviderNodeInfo
from openapi_server import util

from openapi_server.models.cluster_cloud_provider_node_info import ClusterCloudProviderNodeInfo  # noqa: E501

class NodeType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_type_id=None, memory_mb=None, num_cores=None, description=None, instance_type_id=None, is_deprecated=None, node_info=None):  # noqa: E501
        """NodeType - a model defined in OpenAPI

        :param node_type_id: The node_type_id of this NodeType.  # noqa: E501
        :type node_type_id: str
        :param memory_mb: The memory_mb of this NodeType.  # noqa: E501
        :type memory_mb: int
        :param num_cores: The num_cores of this NodeType.  # noqa: E501
        :type num_cores: float
        :param description: The description of this NodeType.  # noqa: E501
        :type description: str
        :param instance_type_id: The instance_type_id of this NodeType.  # noqa: E501
        :type instance_type_id: str
        :param is_deprecated: The is_deprecated of this NodeType.  # noqa: E501
        :type is_deprecated: bool
        :param node_info: The node_info of this NodeType.  # noqa: E501
        :type node_info: ClusterCloudProviderNodeInfo
        """
        self.openapi_types = {
            'node_type_id': str,
            'memory_mb': int,
            'num_cores': float,
            'description': str,
            'instance_type_id': str,
            'is_deprecated': bool,
            'node_info': ClusterCloudProviderNodeInfo
        }

        self.attribute_map = {
            'node_type_id': 'node_type_id',
            'memory_mb': 'memory_mb',
            'num_cores': 'num_cores',
            'description': 'description',
            'instance_type_id': 'instance_type_id',
            'is_deprecated': 'is_deprecated',
            'node_info': 'node_info'
        }

        self._node_type_id = node_type_id
        self._memory_mb = memory_mb
        self._num_cores = num_cores
        self._description = description
        self._instance_type_id = instance_type_id
        self._is_deprecated = is_deprecated
        self._node_info = node_info

    @classmethod
    def from_dict(cls, dikt) -> 'NodeType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NodeType of this NodeType.  # noqa: E501
        :rtype: NodeType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_type_id(self):
        """Gets the node_type_id of this NodeType.

        Unique identifier for this node type. This field is required.  # noqa: E501

        :return: The node_type_id of this NodeType.
        :rtype: str
        """
        return self._node_type_id

    @node_type_id.setter
    def node_type_id(self, node_type_id):
        """Sets the node_type_id of this NodeType.

        Unique identifier for this node type. This field is required.  # noqa: E501

        :param node_type_id: The node_type_id of this NodeType.
        :type node_type_id: str
        """
        if node_type_id is None:
            raise ValueError("Invalid value for `node_type_id`, must not be `None`")  # noqa: E501

        self._node_type_id = node_type_id

    @property
    def memory_mb(self):
        """Gets the memory_mb of this NodeType.

        Memory (in MB) available for this node type. This field is required.  # noqa: E501

        :return: The memory_mb of this NodeType.
        :rtype: int
        """
        return self._memory_mb

    @memory_mb.setter
    def memory_mb(self, memory_mb):
        """Sets the memory_mb of this NodeType.

        Memory (in MB) available for this node type. This field is required.  # noqa: E501

        :param memory_mb: The memory_mb of this NodeType.
        :type memory_mb: int
        """
        if memory_mb is None:
            raise ValueError("Invalid value for `memory_mb`, must not be `None`")  # noqa: E501

        self._memory_mb = memory_mb

    @property
    def num_cores(self):
        """Gets the num_cores of this NodeType.

        Number of CPU cores available for this node type. This can be fractional if the number of cores on a machine instance is not divisible by the number of Spark nodes on that machine. This field is required.  # noqa: E501

        :return: The num_cores of this NodeType.
        :rtype: float
        """
        return self._num_cores

    @num_cores.setter
    def num_cores(self, num_cores):
        """Sets the num_cores of this NodeType.

        Number of CPU cores available for this node type. This can be fractional if the number of cores on a machine instance is not divisible by the number of Spark nodes on that machine. This field is required.  # noqa: E501

        :param num_cores: The num_cores of this NodeType.
        :type num_cores: float
        """

        self._num_cores = num_cores

    @property
    def description(self):
        """Gets the description of this NodeType.

        A string description associated with this node type. This field is required.  # noqa: E501

        :return: The description of this NodeType.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NodeType.

        A string description associated with this node type. This field is required.  # noqa: E501

        :param description: The description of this NodeType.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def instance_type_id(self):
        """Gets the instance_type_id of this NodeType.

        An identifier for the type of hardware that this node runs on. This field is required.  # noqa: E501

        :return: The instance_type_id of this NodeType.
        :rtype: str
        """
        return self._instance_type_id

    @instance_type_id.setter
    def instance_type_id(self, instance_type_id):
        """Sets the instance_type_id of this NodeType.

        An identifier for the type of hardware that this node runs on. This field is required.  # noqa: E501

        :param instance_type_id: The instance_type_id of this NodeType.
        :type instance_type_id: str
        """
        if instance_type_id is None:
            raise ValueError("Invalid value for `instance_type_id`, must not be `None`")  # noqa: E501

        self._instance_type_id = instance_type_id

    @property
    def is_deprecated(self):
        """Gets the is_deprecated of this NodeType.

        Whether the node type is deprecated. Non-deprecated node types offer greater performance.  # noqa: E501

        :return: The is_deprecated of this NodeType.
        :rtype: bool
        """
        return self._is_deprecated

    @is_deprecated.setter
    def is_deprecated(self, is_deprecated):
        """Sets the is_deprecated of this NodeType.

        Whether the node type is deprecated. Non-deprecated node types offer greater performance.  # noqa: E501

        :param is_deprecated: The is_deprecated of this NodeType.
        :type is_deprecated: bool
        """

        self._is_deprecated = is_deprecated

    @property
    def node_info(self):
        """Gets the node_info of this NodeType.


        :return: The node_info of this NodeType.
        :rtype: ClusterCloudProviderNodeInfo
        """
        return self._node_info

    @node_info.setter
    def node_info(self, node_info):
        """Sets the node_info of this NodeType.


        :param node_info: The node_info of this NodeType.
        :type node_info: ClusterCloudProviderNodeInfo
        """

        self._node_info = node_info
