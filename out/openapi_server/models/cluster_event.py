# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.cluster_event_type import ClusterEventType
from openapi_server.models.event_details import EventDetails
from openapi_server import util

from openapi_server.models.cluster_event_type import ClusterEventType  # noqa: E501
from openapi_server.models.event_details import EventDetails  # noqa: E501

class ClusterEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_id=None, timestamp=None, type=None, details=None):  # noqa: E501
        """ClusterEvent - a model defined in OpenAPI

        :param cluster_id: The cluster_id of this ClusterEvent.  # noqa: E501
        :type cluster_id: str
        :param timestamp: The timestamp of this ClusterEvent.  # noqa: E501
        :type timestamp: int
        :param type: The type of this ClusterEvent.  # noqa: E501
        :type type: ClusterEventType
        :param details: The details of this ClusterEvent.  # noqa: E501
        :type details: EventDetails
        """
        self.openapi_types = {
            'cluster_id': str,
            'timestamp': int,
            'type': ClusterEventType,
            'details': EventDetails
        }

        self.attribute_map = {
            'cluster_id': 'cluster_id',
            'timestamp': 'timestamp',
            'type': 'type',
            'details': 'details'
        }

        self._cluster_id = cluster_id
        self._timestamp = timestamp
        self._type = type
        self._details = details

    @classmethod
    def from_dict(cls, dikt) -> 'ClusterEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ClusterEvent of this ClusterEvent.  # noqa: E501
        :rtype: ClusterEvent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_id(self):
        """Gets the cluster_id of this ClusterEvent.

        Canonical identifier for the cluster. This field is required.  # noqa: E501

        :return: The cluster_id of this ClusterEvent.
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this ClusterEvent.

        Canonical identifier for the cluster. This field is required.  # noqa: E501

        :param cluster_id: The cluster_id of this ClusterEvent.
        :type cluster_id: str
        """
        if cluster_id is None:
            raise ValueError("Invalid value for `cluster_id`, must not be `None`")  # noqa: E501

        self._cluster_id = cluster_id

    @property
    def timestamp(self):
        """Gets the timestamp of this ClusterEvent.

        The timestamp when the event occurred, stored as the number of milliseconds since the unix epoch. Assigned by the Timeline service.  # noqa: E501

        :return: The timestamp of this ClusterEvent.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ClusterEvent.

        The timestamp when the event occurred, stored as the number of milliseconds since the unix epoch. Assigned by the Timeline service.  # noqa: E501

        :param timestamp: The timestamp of this ClusterEvent.
        :type timestamp: int
        """

        self._timestamp = timestamp

    @property
    def type(self):
        """Gets the type of this ClusterEvent.


        :return: The type of this ClusterEvent.
        :rtype: ClusterEventType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ClusterEvent.


        :param type: The type of this ClusterEvent.
        :type type: ClusterEventType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def details(self):
        """Gets the details of this ClusterEvent.


        :return: The details of this ClusterEvent.
        :rtype: EventDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ClusterEvent.


        :param details: The details of this ClusterEvent.
        :type details: EventDetails
        """
        if details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")  # noqa: E501

        self._details = details
