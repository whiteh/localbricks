# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class RunParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, jar_params=None, notebook_params=None, python_params=None, spark_submit_params=None, python_named_params=None):  # noqa: E501
        """RunParameters - a model defined in OpenAPI

        :param jar_params: The jar_params of this RunParameters.  # noqa: E501
        :type jar_params: List[str]
        :param notebook_params: The notebook_params of this RunParameters.  # noqa: E501
        :type notebook_params: Dict[str, object]
        :param python_params: The python_params of this RunParameters.  # noqa: E501
        :type python_params: List[str]
        :param spark_submit_params: The spark_submit_params of this RunParameters.  # noqa: E501
        :type spark_submit_params: List[str]
        :param python_named_params: The python_named_params of this RunParameters.  # noqa: E501
        :type python_named_params: object
        """
        self.openapi_types = {
            'jar_params': List[str],
            'notebook_params': Dict[str, object],
            'python_params': List[str],
            'spark_submit_params': List[str],
            'python_named_params': object
        }

        self.attribute_map = {
            'jar_params': 'jar_params',
            'notebook_params': 'notebook_params',
            'python_params': 'python_params',
            'spark_submit_params': 'spark_submit_params',
            'python_named_params': 'python_named_params'
        }

        self._jar_params = jar_params
        self._notebook_params = notebook_params
        self._python_params = python_params
        self._spark_submit_params = spark_submit_params
        self._python_named_params = python_named_params

    @classmethod
    def from_dict(cls, dikt) -> 'RunParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RunParameters of this RunParameters.  # noqa: E501
        :rtype: RunParameters
        """
        return util.deserialize_model(dikt, cls)

    @property
    def jar_params(self):
        """Gets the jar_params of this RunParameters.

        A list of parameters for jobs with Spark JAR tasks, for example `\"jar_params\": [\"john doe\", \"35\"]`. The parameters are used to invoke the main function of the main class specified in the Spark JAR task. If not specified upon `run-now`, it defaults to an empty list. jar_params cannot be specified in conjunction with notebook_params. The JSON representation of this field (for example `{\"jar_params\":[\"john doe\",\"35\"]}`) cannot exceed 10,000 bytes.  Use [Task parameter variables](https://docs.databricks.com/jobs.html#parameter-variables) to set parameters containing information about job runs.  # noqa: E501

        :return: The jar_params of this RunParameters.
        :rtype: List[str]
        """
        return self._jar_params

    @jar_params.setter
    def jar_params(self, jar_params):
        """Sets the jar_params of this RunParameters.

        A list of parameters for jobs with Spark JAR tasks, for example `\"jar_params\": [\"john doe\", \"35\"]`. The parameters are used to invoke the main function of the main class specified in the Spark JAR task. If not specified upon `run-now`, it defaults to an empty list. jar_params cannot be specified in conjunction with notebook_params. The JSON representation of this field (for example `{\"jar_params\":[\"john doe\",\"35\"]}`) cannot exceed 10,000 bytes.  Use [Task parameter variables](https://docs.databricks.com/jobs.html#parameter-variables) to set parameters containing information about job runs.  # noqa: E501

        :param jar_params: The jar_params of this RunParameters.
        :type jar_params: List[str]
        """

        self._jar_params = jar_params

    @property
    def notebook_params(self):
        """Gets the notebook_params of this RunParameters.

        A map from keys to values for jobs with notebook task, for example `\"notebook_params\": {\"name\": \"john doe\", \"age\": \"35\"}`. The map is passed to the notebook and is accessible through the [dbutils.widgets.get](https://docs.databricks.com/dev-tools/databricks-utils.html#dbutils-widgets) function.  If not specified upon `run-now`, the triggered run uses the job’s base parameters.  notebook_params cannot be specified in conjunction with jar_params.  Use [Task parameter variables](https://docs.databricks.com/jobs.html#parameter-variables) to set parameters containing information about job runs.  The JSON representation of this field (for example `{\"notebook_params\":{\"name\":\"john doe\",\"age\":\"35\"}}`) cannot exceed 10,000 bytes.  # noqa: E501

        :return: The notebook_params of this RunParameters.
        :rtype: Dict[str, object]
        """
        return self._notebook_params

    @notebook_params.setter
    def notebook_params(self, notebook_params):
        """Sets the notebook_params of this RunParameters.

        A map from keys to values for jobs with notebook task, for example `\"notebook_params\": {\"name\": \"john doe\", \"age\": \"35\"}`. The map is passed to the notebook and is accessible through the [dbutils.widgets.get](https://docs.databricks.com/dev-tools/databricks-utils.html#dbutils-widgets) function.  If not specified upon `run-now`, the triggered run uses the job’s base parameters.  notebook_params cannot be specified in conjunction with jar_params.  Use [Task parameter variables](https://docs.databricks.com/jobs.html#parameter-variables) to set parameters containing information about job runs.  The JSON representation of this field (for example `{\"notebook_params\":{\"name\":\"john doe\",\"age\":\"35\"}}`) cannot exceed 10,000 bytes.  # noqa: E501

        :param notebook_params: The notebook_params of this RunParameters.
        :type notebook_params: Dict[str, object]
        """

        self._notebook_params = notebook_params

    @property
    def python_params(self):
        """Gets the python_params of this RunParameters.

        A list of parameters for jobs with Python tasks, for example `\"python_params\": [\"john doe\", \"35\"]`. The parameters are passed to Python file as command-line parameters. If specified upon `run-now`, it would overwrite the parameters specified in job setting. The JSON representation of this field (for example `{\"python_params\":[\"john doe\",\"35\"]}`) cannot exceed 10,000 bytes.  Use [Task parameter variables](https://docs.databricks.com/jobs.html#parameter-variables) to set parameters containing information about job runs.  Important  These parameters accept only Latin characters (ASCII character set). Using non-ASCII characters returns an error. Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis, and emojis.  # noqa: E501

        :return: The python_params of this RunParameters.
        :rtype: List[str]
        """
        return self._python_params

    @python_params.setter
    def python_params(self, python_params):
        """Sets the python_params of this RunParameters.

        A list of parameters for jobs with Python tasks, for example `\"python_params\": [\"john doe\", \"35\"]`. The parameters are passed to Python file as command-line parameters. If specified upon `run-now`, it would overwrite the parameters specified in job setting. The JSON representation of this field (for example `{\"python_params\":[\"john doe\",\"35\"]}`) cannot exceed 10,000 bytes.  Use [Task parameter variables](https://docs.databricks.com/jobs.html#parameter-variables) to set parameters containing information about job runs.  Important  These parameters accept only Latin characters (ASCII character set). Using non-ASCII characters returns an error. Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis, and emojis.  # noqa: E501

        :param python_params: The python_params of this RunParameters.
        :type python_params: List[str]
        """

        self._python_params = python_params

    @property
    def spark_submit_params(self):
        """Gets the spark_submit_params of this RunParameters.

        A list of parameters for jobs with spark submit task, for example `\"spark_submit_params\": [\"--class\", \"org.apache.spark.examples.SparkPi\"]`. The parameters are passed to spark-submit script as command-line parameters. If specified upon `run-now`, it would overwrite the parameters specified in job setting. The JSON representation of this field (for example `{\"python_params\":[\"john doe\",\"35\"]}`) cannot exceed 10,000 bytes.  Use [Task parameter variables](https://docs.databricks.com/jobs.html#parameter-variables) to set parameters containing information about job runs.  Important  These parameters accept only Latin characters (ASCII character set). Using non-ASCII characters returns an error. Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis, and emojis.  # noqa: E501

        :return: The spark_submit_params of this RunParameters.
        :rtype: List[str]
        """
        return self._spark_submit_params

    @spark_submit_params.setter
    def spark_submit_params(self, spark_submit_params):
        """Sets the spark_submit_params of this RunParameters.

        A list of parameters for jobs with spark submit task, for example `\"spark_submit_params\": [\"--class\", \"org.apache.spark.examples.SparkPi\"]`. The parameters are passed to spark-submit script as command-line parameters. If specified upon `run-now`, it would overwrite the parameters specified in job setting. The JSON representation of this field (for example `{\"python_params\":[\"john doe\",\"35\"]}`) cannot exceed 10,000 bytes.  Use [Task parameter variables](https://docs.databricks.com/jobs.html#parameter-variables) to set parameters containing information about job runs.  Important  These parameters accept only Latin characters (ASCII character set). Using non-ASCII characters returns an error. Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis, and emojis.  # noqa: E501

        :param spark_submit_params: The spark_submit_params of this RunParameters.
        :type spark_submit_params: List[str]
        """

        self._spark_submit_params = spark_submit_params

    @property
    def python_named_params(self):
        """Gets the python_named_params of this RunParameters.

        A map from keys to values for jobs with Python wheel task, for example `\"python_named_params\": {\"name\": \"task\", \"data\": \"dbfs:/path/to/data.json\"}`.  # noqa: E501

        :return: The python_named_params of this RunParameters.
        :rtype: object
        """
        return self._python_named_params

    @python_named_params.setter
    def python_named_params(self, python_named_params):
        """Sets the python_named_params of this RunParameters.

        A map from keys to values for jobs with Python wheel task, for example `\"python_named_params\": {\"name\": \"task\", \"data\": \"dbfs:/path/to/data.json\"}`.  # noqa: E501

        :param python_named_params: The python_named_params of this RunParameters.
        :type python_named_params: object
        """

        self._python_named_params = python_named_params
