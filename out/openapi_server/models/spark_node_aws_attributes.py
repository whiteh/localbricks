# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class SparkNodeAwsAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_spot=None):  # noqa: E501
        """SparkNodeAwsAttributes - a model defined in OpenAPI

        :param is_spot: The is_spot of this SparkNodeAwsAttributes.  # noqa: E501
        :type is_spot: bool
        """
        self.openapi_types = {
            'is_spot': bool
        }

        self.attribute_map = {
            'is_spot': 'is_spot'
        }

        self._is_spot = is_spot

    @classmethod
    def from_dict(cls, dikt) -> 'SparkNodeAwsAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SparkNodeAwsAttributes of this SparkNodeAwsAttributes.  # noqa: E501
        :rtype: SparkNodeAwsAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_spot(self):
        """Gets the is_spot of this SparkNodeAwsAttributes.

        Whether this node is on an Amazon spot instance.  # noqa: E501

        :return: The is_spot of this SparkNodeAwsAttributes.
        :rtype: bool
        """
        return self._is_spot

    @is_spot.setter
    def is_spot(self, is_spot):
        """Sets the is_spot of this SparkNodeAwsAttributes.

        Whether this node is on an Amazon spot instance.  # noqa: E501

        :param is_spot: The is_spot of this SparkNodeAwsAttributes.
        :type is_spot: bool
        """

        self._is_spot = is_spot
