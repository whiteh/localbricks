# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class CronSchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, quartz_cron_expression=None, timezone_id=None, pause_status=None):  # noqa: E501
        """CronSchedule - a model defined in OpenAPI

        :param quartz_cron_expression: The quartz_cron_expression of this CronSchedule.  # noqa: E501
        :type quartz_cron_expression: str
        :param timezone_id: The timezone_id of this CronSchedule.  # noqa: E501
        :type timezone_id: str
        :param pause_status: The pause_status of this CronSchedule.  # noqa: E501
        :type pause_status: str
        """
        self.openapi_types = {
            'quartz_cron_expression': str,
            'timezone_id': str,
            'pause_status': str
        }

        self.attribute_map = {
            'quartz_cron_expression': 'quartz_cron_expression',
            'timezone_id': 'timezone_id',
            'pause_status': 'pause_status'
        }

        self._quartz_cron_expression = quartz_cron_expression
        self._timezone_id = timezone_id
        self._pause_status = pause_status

    @classmethod
    def from_dict(cls, dikt) -> 'CronSchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CronSchedule of this CronSchedule.  # noqa: E501
        :rtype: CronSchedule
        """
        return util.deserialize_model(dikt, cls)

    @property
    def quartz_cron_expression(self):
        """Gets the quartz_cron_expression of this CronSchedule.

        A Cron expression using Quartz syntax that describes the schedule for a job. See [Cron Trigger](http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html) for details. This field is required.  # noqa: E501

        :return: The quartz_cron_expression of this CronSchedule.
        :rtype: str
        """
        return self._quartz_cron_expression

    @quartz_cron_expression.setter
    def quartz_cron_expression(self, quartz_cron_expression):
        """Sets the quartz_cron_expression of this CronSchedule.

        A Cron expression using Quartz syntax that describes the schedule for a job. See [Cron Trigger](http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html) for details. This field is required.  # noqa: E501

        :param quartz_cron_expression: The quartz_cron_expression of this CronSchedule.
        :type quartz_cron_expression: str
        """
        if quartz_cron_expression is None:
            raise ValueError("Invalid value for `quartz_cron_expression`, must not be `None`")  # noqa: E501

        self._quartz_cron_expression = quartz_cron_expression

    @property
    def timezone_id(self):
        """Gets the timezone_id of this CronSchedule.

        A Java timezone ID. The schedule for a job is resolved with respect to this timezone. See [Java TimeZone](https://docs.oracle.com/javase/7/docs/api/java/util/TimeZone.html) for details. This field is required.  # noqa: E501

        :return: The timezone_id of this CronSchedule.
        :rtype: str
        """
        return self._timezone_id

    @timezone_id.setter
    def timezone_id(self, timezone_id):
        """Sets the timezone_id of this CronSchedule.

        A Java timezone ID. The schedule for a job is resolved with respect to this timezone. See [Java TimeZone](https://docs.oracle.com/javase/7/docs/api/java/util/TimeZone.html) for details. This field is required.  # noqa: E501

        :param timezone_id: The timezone_id of this CronSchedule.
        :type timezone_id: str
        """
        if timezone_id is None:
            raise ValueError("Invalid value for `timezone_id`, must not be `None`")  # noqa: E501

        self._timezone_id = timezone_id

    @property
    def pause_status(self):
        """Gets the pause_status of this CronSchedule.

        Indicate whether this schedule is paused or not.  # noqa: E501

        :return: The pause_status of this CronSchedule.
        :rtype: str
        """
        return self._pause_status

    @pause_status.setter
    def pause_status(self, pause_status):
        """Sets the pause_status of this CronSchedule.

        Indicate whether this schedule is paused or not.  # noqa: E501

        :param pause_status: The pause_status of this CronSchedule.
        :type pause_status: str
        """
        allowed_values = ["PAUSED", "UNPAUSED"]  # noqa: E501
        if pause_status not in allowed_values:
            raise ValueError(
                "Invalid value for `pause_status` ({0}), must be one of {1}"
                .format(pause_status, allowed_values)
            )

        self._pause_status = pause_status
