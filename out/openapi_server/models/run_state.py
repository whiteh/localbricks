# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.run_life_cycle_state import RunLifeCycleState
from openapi_server.models.run_result_state import RunResultState
from openapi_server import util

from openapi_server.models.run_life_cycle_state import RunLifeCycleState  # noqa: E501
from openapi_server.models.run_result_state import RunResultState  # noqa: E501

class RunState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, life_cycle_state=None, result_state=None, user_cancelled_or_timedout=None, state_message=None):  # noqa: E501
        """RunState - a model defined in OpenAPI

        :param life_cycle_state: The life_cycle_state of this RunState.  # noqa: E501
        :type life_cycle_state: RunLifeCycleState
        :param result_state: The result_state of this RunState.  # noqa: E501
        :type result_state: RunResultState
        :param user_cancelled_or_timedout: The user_cancelled_or_timedout of this RunState.  # noqa: E501
        :type user_cancelled_or_timedout: bool
        :param state_message: The state_message of this RunState.  # noqa: E501
        :type state_message: str
        """
        self.openapi_types = {
            'life_cycle_state': RunLifeCycleState,
            'result_state': RunResultState,
            'user_cancelled_or_timedout': bool,
            'state_message': str
        }

        self.attribute_map = {
            'life_cycle_state': 'life_cycle_state',
            'result_state': 'result_state',
            'user_cancelled_or_timedout': 'user_cancelled_or_timedout',
            'state_message': 'state_message'
        }

        self._life_cycle_state = life_cycle_state
        self._result_state = result_state
        self._user_cancelled_or_timedout = user_cancelled_or_timedout
        self._state_message = state_message

    @classmethod
    def from_dict(cls, dikt) -> 'RunState':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RunState of this RunState.  # noqa: E501
        :rtype: RunState
        """
        return util.deserialize_model(dikt, cls)

    @property
    def life_cycle_state(self):
        """Gets the life_cycle_state of this RunState.


        :return: The life_cycle_state of this RunState.
        :rtype: RunLifeCycleState
        """
        return self._life_cycle_state

    @life_cycle_state.setter
    def life_cycle_state(self, life_cycle_state):
        """Sets the life_cycle_state of this RunState.


        :param life_cycle_state: The life_cycle_state of this RunState.
        :type life_cycle_state: RunLifeCycleState
        """

        self._life_cycle_state = life_cycle_state

    @property
    def result_state(self):
        """Gets the result_state of this RunState.


        :return: The result_state of this RunState.
        :rtype: RunResultState
        """
        return self._result_state

    @result_state.setter
    def result_state(self, result_state):
        """Sets the result_state of this RunState.


        :param result_state: The result_state of this RunState.
        :type result_state: RunResultState
        """

        self._result_state = result_state

    @property
    def user_cancelled_or_timedout(self):
        """Gets the user_cancelled_or_timedout of this RunState.

        Whether a run was canceled manually by a user or by the scheduler because the run timed out.  # noqa: E501

        :return: The user_cancelled_or_timedout of this RunState.
        :rtype: bool
        """
        return self._user_cancelled_or_timedout

    @user_cancelled_or_timedout.setter
    def user_cancelled_or_timedout(self, user_cancelled_or_timedout):
        """Sets the user_cancelled_or_timedout of this RunState.

        Whether a run was canceled manually by a user or by the scheduler because the run timed out.  # noqa: E501

        :param user_cancelled_or_timedout: The user_cancelled_or_timedout of this RunState.
        :type user_cancelled_or_timedout: bool
        """

        self._user_cancelled_or_timedout = user_cancelled_or_timedout

    @property
    def state_message(self):
        """Gets the state_message of this RunState.

        A descriptive message for the current state. This field is unstructured, and its exact format is subject to change.  # noqa: E501

        :return: The state_message of this RunState.
        :rtype: str
        """
        return self._state_message

    @state_message.setter
    def state_message(self, state_message):
        """Sets the state_message of this RunState.

        A descriptive message for the current state. This field is unstructured, and its exact format is subject to change.  # noqa: E501

        :param state_message: The state_message of this RunState.
        :type state_message: str
        """

        self._state_message = state_message
