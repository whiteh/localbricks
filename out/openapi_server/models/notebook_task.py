# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class NotebookTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, notebook_path=None, base_parameters=None):  # noqa: E501
        """NotebookTask - a model defined in OpenAPI

        :param notebook_path: The notebook_path of this NotebookTask.  # noqa: E501
        :type notebook_path: str
        :param base_parameters: The base_parameters of this NotebookTask.  # noqa: E501
        :type base_parameters: Dict[str, object]
        """
        self.openapi_types = {
            'notebook_path': str,
            'base_parameters': Dict[str, object]
        }

        self.attribute_map = {
            'notebook_path': 'notebook_path',
            'base_parameters': 'base_parameters'
        }

        self._notebook_path = notebook_path
        self._base_parameters = base_parameters

    @classmethod
    def from_dict(cls, dikt) -> 'NotebookTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NotebookTask of this NotebookTask.  # noqa: E501
        :rtype: NotebookTask
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notebook_path(self):
        """Gets the notebook_path of this NotebookTask.

        The path of the notebook to be run in the Databricks workspace or remote repository. For notebooks stored in the Databricks workspace, the path must be absolute and begin with a slash. For notebooks stored in a remote repository, the path must be relative. This field is required.  # noqa: E501

        :return: The notebook_path of this NotebookTask.
        :rtype: str
        """
        return self._notebook_path

    @notebook_path.setter
    def notebook_path(self, notebook_path):
        """Sets the notebook_path of this NotebookTask.

        The path of the notebook to be run in the Databricks workspace or remote repository. For notebooks stored in the Databricks workspace, the path must be absolute and begin with a slash. For notebooks stored in a remote repository, the path must be relative. This field is required.  # noqa: E501

        :param notebook_path: The notebook_path of this NotebookTask.
        :type notebook_path: str
        """
        if notebook_path is None:
            raise ValueError("Invalid value for `notebook_path`, must not be `None`")  # noqa: E501

        self._notebook_path = notebook_path

    @property
    def base_parameters(self):
        """Gets the base_parameters of this NotebookTask.

        Base parameters to be used for each run of this job. If the run is initiated by a call to [`run-now`](https://docs.databricks.com/dev-tools/api/latest/jobs.html#operation/JobsRunNow) with parameters specified, the two parameters maps are merged. If the same key is specified in `base_parameters` and in `run-now`, the value from `run-now` is used.  Use [Task parameter variables](https://docs.databricks.com/jobs.html#parameter-variables) to set parameters containing information about job runs.  If the notebook takes a parameter that is not specified in the job’s `base_parameters` or the `run-now` override parameters, the default value from the notebook is used.  Retrieve these parameters in a notebook using [dbutils.widgets.get](https://docs.databricks.com/dev-tools/databricks-utils.html#dbutils-widgets).  # noqa: E501

        :return: The base_parameters of this NotebookTask.
        :rtype: Dict[str, object]
        """
        return self._base_parameters

    @base_parameters.setter
    def base_parameters(self, base_parameters):
        """Sets the base_parameters of this NotebookTask.

        Base parameters to be used for each run of this job. If the run is initiated by a call to [`run-now`](https://docs.databricks.com/dev-tools/api/latest/jobs.html#operation/JobsRunNow) with parameters specified, the two parameters maps are merged. If the same key is specified in `base_parameters` and in `run-now`, the value from `run-now` is used.  Use [Task parameter variables](https://docs.databricks.com/jobs.html#parameter-variables) to set parameters containing information about job runs.  If the notebook takes a parameter that is not specified in the job’s `base_parameters` or the `run-now` override parameters, the default value from the notebook is used.  Retrieve these parameters in a notebook using [dbutils.widgets.get](https://docs.databricks.com/dev-tools/databricks-utils.html#dbutils-widgets).  # noqa: E501

        :param base_parameters: The base_parameters of this NotebookTask.
        :type base_parameters: Dict[str, object]
        """

        self._base_parameters = base_parameters
