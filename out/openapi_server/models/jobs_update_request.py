# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.job_settings import JobSettings
from openapi_server import util

from openapi_server.models.job_settings import JobSettings  # noqa: E501

class JobsUpdateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_id=None, new_settings=None, fields_to_remove=None):  # noqa: E501
        """JobsUpdateRequest - a model defined in OpenAPI

        :param job_id: The job_id of this JobsUpdateRequest.  # noqa: E501
        :type job_id: int
        :param new_settings: The new_settings of this JobsUpdateRequest.  # noqa: E501
        :type new_settings: JobSettings
        :param fields_to_remove: The fields_to_remove of this JobsUpdateRequest.  # noqa: E501
        :type fields_to_remove: List[str]
        """
        self.openapi_types = {
            'job_id': int,
            'new_settings': JobSettings,
            'fields_to_remove': List[str]
        }

        self.attribute_map = {
            'job_id': 'job_id',
            'new_settings': 'new_settings',
            'fields_to_remove': 'fields_to_remove'
        }

        self._job_id = job_id
        self._new_settings = new_settings
        self._fields_to_remove = fields_to_remove

    @classmethod
    def from_dict(cls, dikt) -> 'JobsUpdateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JobsUpdate_request of this JobsUpdateRequest.  # noqa: E501
        :rtype: JobsUpdateRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self):
        """Gets the job_id of this JobsUpdateRequest.

        The canonical identifier of the job to update. This field is required.  # noqa: E501

        :return: The job_id of this JobsUpdateRequest.
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this JobsUpdateRequest.

        The canonical identifier of the job to update. This field is required.  # noqa: E501

        :param job_id: The job_id of this JobsUpdateRequest.
        :type job_id: int
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")  # noqa: E501

        self._job_id = job_id

    @property
    def new_settings(self):
        """Gets the new_settings of this JobsUpdateRequest.


        :return: The new_settings of this JobsUpdateRequest.
        :rtype: JobSettings
        """
        return self._new_settings

    @new_settings.setter
    def new_settings(self, new_settings):
        """Sets the new_settings of this JobsUpdateRequest.


        :param new_settings: The new_settings of this JobsUpdateRequest.
        :type new_settings: JobSettings
        """

        self._new_settings = new_settings

    @property
    def fields_to_remove(self):
        """Gets the fields_to_remove of this JobsUpdateRequest.

        Remove top-level fields in the job settings. Removing nested fields is not supported. This field is optional.  # noqa: E501

        :return: The fields_to_remove of this JobsUpdateRequest.
        :rtype: List[str]
        """
        return self._fields_to_remove

    @fields_to_remove.setter
    def fields_to_remove(self, fields_to_remove):
        """Sets the fields_to_remove of this JobsUpdateRequest.

        Remove top-level fields in the job settings. Removing nested fields is not supported. This field is optional.  # noqa: E501

        :param fields_to_remove: The fields_to_remove of this JobsUpdateRequest.
        :type fields_to_remove: List[str]
        """

        self._fields_to_remove = fields_to_remove
