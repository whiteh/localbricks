# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class JobEmailNotifications(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, on_start=None, on_success=None, on_failure=None, no_alert_for_skipped_runs=None):  # noqa: E501
        """JobEmailNotifications - a model defined in OpenAPI

        :param on_start: The on_start of this JobEmailNotifications.  # noqa: E501
        :type on_start: List[str]
        :param on_success: The on_success of this JobEmailNotifications.  # noqa: E501
        :type on_success: List[str]
        :param on_failure: The on_failure of this JobEmailNotifications.  # noqa: E501
        :type on_failure: List[str]
        :param no_alert_for_skipped_runs: The no_alert_for_skipped_runs of this JobEmailNotifications.  # noqa: E501
        :type no_alert_for_skipped_runs: bool
        """
        self.openapi_types = {
            'on_start': List[str],
            'on_success': List[str],
            'on_failure': List[str],
            'no_alert_for_skipped_runs': bool
        }

        self.attribute_map = {
            'on_start': 'on_start',
            'on_success': 'on_success',
            'on_failure': 'on_failure',
            'no_alert_for_skipped_runs': 'no_alert_for_skipped_runs'
        }

        self._on_start = on_start
        self._on_success = on_success
        self._on_failure = on_failure
        self._no_alert_for_skipped_runs = no_alert_for_skipped_runs

    @classmethod
    def from_dict(cls, dikt) -> 'JobEmailNotifications':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JobEmailNotifications of this JobEmailNotifications.  # noqa: E501
        :rtype: JobEmailNotifications
        """
        return util.deserialize_model(dikt, cls)

    @property
    def on_start(self):
        """Gets the on_start of this JobEmailNotifications.

        A list of email addresses to be notified when a run begins. If not specified on job creation, reset, or update, the list is empty, and notifications are not sent.  # noqa: E501

        :return: The on_start of this JobEmailNotifications.
        :rtype: List[str]
        """
        return self._on_start

    @on_start.setter
    def on_start(self, on_start):
        """Sets the on_start of this JobEmailNotifications.

        A list of email addresses to be notified when a run begins. If not specified on job creation, reset, or update, the list is empty, and notifications are not sent.  # noqa: E501

        :param on_start: The on_start of this JobEmailNotifications.
        :type on_start: List[str]
        """

        self._on_start = on_start

    @property
    def on_success(self):
        """Gets the on_success of this JobEmailNotifications.

        A list of email addresses to be notified when a run successfully completes. A run is considered to have completed successfully if it ends with a `TERMINATED` `life_cycle_state` and a `SUCCESSFUL` result_state. If not specified on job creation, reset, or update, the list is empty, and notifications are not sent.  # noqa: E501

        :return: The on_success of this JobEmailNotifications.
        :rtype: List[str]
        """
        return self._on_success

    @on_success.setter
    def on_success(self, on_success):
        """Sets the on_success of this JobEmailNotifications.

        A list of email addresses to be notified when a run successfully completes. A run is considered to have completed successfully if it ends with a `TERMINATED` `life_cycle_state` and a `SUCCESSFUL` result_state. If not specified on job creation, reset, or update, the list is empty, and notifications are not sent.  # noqa: E501

        :param on_success: The on_success of this JobEmailNotifications.
        :type on_success: List[str]
        """

        self._on_success = on_success

    @property
    def on_failure(self):
        """Gets the on_failure of this JobEmailNotifications.

        A list of email addresses to be notified when a run unsuccessfully completes. A run is considered to have completed unsuccessfully if it ends with an `INTERNAL_ERROR` `life_cycle_state` or a `SKIPPED`, `FAILED`, or `TIMED_OUT` result_state. If this is not specified on job creation, reset, or update the list is empty, and notifications are not sent.  # noqa: E501

        :return: The on_failure of this JobEmailNotifications.
        :rtype: List[str]
        """
        return self._on_failure

    @on_failure.setter
    def on_failure(self, on_failure):
        """Sets the on_failure of this JobEmailNotifications.

        A list of email addresses to be notified when a run unsuccessfully completes. A run is considered to have completed unsuccessfully if it ends with an `INTERNAL_ERROR` `life_cycle_state` or a `SKIPPED`, `FAILED`, or `TIMED_OUT` result_state. If this is not specified on job creation, reset, or update the list is empty, and notifications are not sent.  # noqa: E501

        :param on_failure: The on_failure of this JobEmailNotifications.
        :type on_failure: List[str]
        """

        self._on_failure = on_failure

    @property
    def no_alert_for_skipped_runs(self):
        """Gets the no_alert_for_skipped_runs of this JobEmailNotifications.

        If true, do not send email to recipients specified in `on_failure` if the run is skipped.  # noqa: E501

        :return: The no_alert_for_skipped_runs of this JobEmailNotifications.
        :rtype: bool
        """
        return self._no_alert_for_skipped_runs

    @no_alert_for_skipped_runs.setter
    def no_alert_for_skipped_runs(self, no_alert_for_skipped_runs):
        """Sets the no_alert_for_skipped_runs of this JobEmailNotifications.

        If true, do not send email to recipients specified in `on_failure` if the run is skipped.  # noqa: E501

        :param no_alert_for_skipped_runs: The no_alert_for_skipped_runs of this JobEmailNotifications.
        :type no_alert_for_skipped_runs: bool
        """

        self._no_alert_for_skipped_runs = no_alert_for_skipped_runs
