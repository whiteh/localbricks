# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class RepairRunInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, run_id=None, rerun_tasks=None, latest_repair_id=None):  # noqa: E501
        """RepairRunInput - a model defined in OpenAPI

        :param run_id: The run_id of this RepairRunInput.  # noqa: E501
        :type run_id: int
        :param rerun_tasks: The rerun_tasks of this RepairRunInput.  # noqa: E501
        :type rerun_tasks: List[str]
        :param latest_repair_id: The latest_repair_id of this RepairRunInput.  # noqa: E501
        :type latest_repair_id: int
        """
        self.openapi_types = {
            'run_id': int,
            'rerun_tasks': List[str],
            'latest_repair_id': int
        }

        self.attribute_map = {
            'run_id': 'run_id',
            'rerun_tasks': 'rerun_tasks',
            'latest_repair_id': 'latest_repair_id'
        }

        self._run_id = run_id
        self._rerun_tasks = rerun_tasks
        self._latest_repair_id = latest_repair_id

    @classmethod
    def from_dict(cls, dikt) -> 'RepairRunInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RepairRunInput of this RepairRunInput.  # noqa: E501
        :rtype: RepairRunInput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def run_id(self):
        """Gets the run_id of this RepairRunInput.

        The job run ID of the run to repair. The run must not be in progress.  # noqa: E501

        :return: The run_id of this RepairRunInput.
        :rtype: int
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this RepairRunInput.

        The job run ID of the run to repair. The run must not be in progress.  # noqa: E501

        :param run_id: The run_id of this RepairRunInput.
        :type run_id: int
        """

        self._run_id = run_id

    @property
    def rerun_tasks(self):
        """Gets the rerun_tasks of this RepairRunInput.

        The task keys of the task runs to repair.  # noqa: E501

        :return: The rerun_tasks of this RepairRunInput.
        :rtype: List[str]
        """
        return self._rerun_tasks

    @rerun_tasks.setter
    def rerun_tasks(self, rerun_tasks):
        """Sets the rerun_tasks of this RepairRunInput.

        The task keys of the task runs to repair.  # noqa: E501

        :param rerun_tasks: The rerun_tasks of this RepairRunInput.
        :type rerun_tasks: List[str]
        """

        self._rerun_tasks = rerun_tasks

    @property
    def latest_repair_id(self):
        """Gets the latest_repair_id of this RepairRunInput.

        The ID of the latest repair. This parameter is not required when repairing a run for the first time, but must be provided on subsequent requests to repair the same run.  # noqa: E501

        :return: The latest_repair_id of this RepairRunInput.
        :rtype: int
        """
        return self._latest_repair_id

    @latest_repair_id.setter
    def latest_repair_id(self, latest_repair_id):
        """Sets the latest_repair_id of this RepairRunInput.

        The ID of the latest repair. This parameter is not required when repairing a run for the first time, but must be provided on subsequent requests to repair the same run.  # noqa: E501

        :param latest_repair_id: The latest_repair_id of this RepairRunInput.
        :type latest_repair_id: int
        """

        self._latest_repair_id = latest_repair_id
