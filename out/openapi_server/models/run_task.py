# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.cluster_instance import ClusterInstance
from openapi_server.models.git_source import GitSource
from openapi_server.models.library import Library
from openapi_server.models.new_cluster import NewCluster
from openapi_server.models.notebook_task import NotebookTask
from openapi_server.models.pipeline_task import PipelineTask
from openapi_server.models.python_wheel_task import PythonWheelTask
from openapi_server.models.run_state import RunState
from openapi_server.models.spark_jar_task import SparkJarTask
from openapi_server.models.spark_python_task import SparkPythonTask
from openapi_server.models.spark_submit_task import SparkSubmitTask
from openapi_server.models.task_dependencies_inner import TaskDependenciesInner
import re
from openapi_server import util

from openapi_server.models.cluster_instance import ClusterInstance  # noqa: E501
from openapi_server.models.git_source import GitSource  # noqa: E501
from openapi_server.models.library import Library  # noqa: E501
from openapi_server.models.new_cluster import NewCluster  # noqa: E501
from openapi_server.models.notebook_task import NotebookTask  # noqa: E501
from openapi_server.models.pipeline_task import PipelineTask  # noqa: E501
from openapi_server.models.python_wheel_task import PythonWheelTask  # noqa: E501
from openapi_server.models.run_state import RunState  # noqa: E501
from openapi_server.models.spark_jar_task import SparkJarTask  # noqa: E501
from openapi_server.models.spark_python_task import SparkPythonTask  # noqa: E501
from openapi_server.models.spark_submit_task import SparkSubmitTask  # noqa: E501
from openapi_server.models.task_dependencies_inner import TaskDependenciesInner  # noqa: E501
import re  # noqa: E501

class RunTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, run_id=None, task_key=None, description=None, state=None, depends_on=None, existing_cluster_id=None, new_cluster=None, libraries=None, notebook_task=None, spark_jar_task=None, spark_python_task=None, spark_submit_task=None, pipeline_task=None, python_wheel_task=None, start_time=None, setup_duration=None, execution_duration=None, cleanup_duration=None, end_time=None, attempt_number=None, cluster_instance=None, git_source=None):  # noqa: E501
        """RunTask - a model defined in OpenAPI

        :param run_id: The run_id of this RunTask.  # noqa: E501
        :type run_id: int
        :param task_key: The task_key of this RunTask.  # noqa: E501
        :type task_key: str
        :param description: The description of this RunTask.  # noqa: E501
        :type description: str
        :param state: The state of this RunTask.  # noqa: E501
        :type state: RunState
        :param depends_on: The depends_on of this RunTask.  # noqa: E501
        :type depends_on: List[TaskDependenciesInner]
        :param existing_cluster_id: The existing_cluster_id of this RunTask.  # noqa: E501
        :type existing_cluster_id: str
        :param new_cluster: The new_cluster of this RunTask.  # noqa: E501
        :type new_cluster: NewCluster
        :param libraries: The libraries of this RunTask.  # noqa: E501
        :type libraries: List[Library]
        :param notebook_task: The notebook_task of this RunTask.  # noqa: E501
        :type notebook_task: NotebookTask
        :param spark_jar_task: The spark_jar_task of this RunTask.  # noqa: E501
        :type spark_jar_task: SparkJarTask
        :param spark_python_task: The spark_python_task of this RunTask.  # noqa: E501
        :type spark_python_task: SparkPythonTask
        :param spark_submit_task: The spark_submit_task of this RunTask.  # noqa: E501
        :type spark_submit_task: SparkSubmitTask
        :param pipeline_task: The pipeline_task of this RunTask.  # noqa: E501
        :type pipeline_task: PipelineTask
        :param python_wheel_task: The python_wheel_task of this RunTask.  # noqa: E501
        :type python_wheel_task: PythonWheelTask
        :param start_time: The start_time of this RunTask.  # noqa: E501
        :type start_time: int
        :param setup_duration: The setup_duration of this RunTask.  # noqa: E501
        :type setup_duration: int
        :param execution_duration: The execution_duration of this RunTask.  # noqa: E501
        :type execution_duration: int
        :param cleanup_duration: The cleanup_duration of this RunTask.  # noqa: E501
        :type cleanup_duration: int
        :param end_time: The end_time of this RunTask.  # noqa: E501
        :type end_time: int
        :param attempt_number: The attempt_number of this RunTask.  # noqa: E501
        :type attempt_number: int
        :param cluster_instance: The cluster_instance of this RunTask.  # noqa: E501
        :type cluster_instance: ClusterInstance
        :param git_source: The git_source of this RunTask.  # noqa: E501
        :type git_source: GitSource
        """
        self.openapi_types = {
            'run_id': int,
            'task_key': str,
            'description': str,
            'state': RunState,
            'depends_on': List[TaskDependenciesInner],
            'existing_cluster_id': str,
            'new_cluster': NewCluster,
            'libraries': List[Library],
            'notebook_task': NotebookTask,
            'spark_jar_task': SparkJarTask,
            'spark_python_task': SparkPythonTask,
            'spark_submit_task': SparkSubmitTask,
            'pipeline_task': PipelineTask,
            'python_wheel_task': PythonWheelTask,
            'start_time': int,
            'setup_duration': int,
            'execution_duration': int,
            'cleanup_duration': int,
            'end_time': int,
            'attempt_number': int,
            'cluster_instance': ClusterInstance,
            'git_source': GitSource
        }

        self.attribute_map = {
            'run_id': 'run_id',
            'task_key': 'task_key',
            'description': 'description',
            'state': 'state',
            'depends_on': 'depends_on',
            'existing_cluster_id': 'existing_cluster_id',
            'new_cluster': 'new_cluster',
            'libraries': 'libraries',
            'notebook_task': 'notebook_task',
            'spark_jar_task': 'spark_jar_task',
            'spark_python_task': 'spark_python_task',
            'spark_submit_task': 'spark_submit_task',
            'pipeline_task': 'pipeline_task',
            'python_wheel_task': 'python_wheel_task',
            'start_time': 'start_time',
            'setup_duration': 'setup_duration',
            'execution_duration': 'execution_duration',
            'cleanup_duration': 'cleanup_duration',
            'end_time': 'end_time',
            'attempt_number': 'attempt_number',
            'cluster_instance': 'cluster_instance',
            'git_source': 'git_source'
        }

        self._run_id = run_id
        self._task_key = task_key
        self._description = description
        self._state = state
        self._depends_on = depends_on
        self._existing_cluster_id = existing_cluster_id
        self._new_cluster = new_cluster
        self._libraries = libraries
        self._notebook_task = notebook_task
        self._spark_jar_task = spark_jar_task
        self._spark_python_task = spark_python_task
        self._spark_submit_task = spark_submit_task
        self._pipeline_task = pipeline_task
        self._python_wheel_task = python_wheel_task
        self._start_time = start_time
        self._setup_duration = setup_duration
        self._execution_duration = execution_duration
        self._cleanup_duration = cleanup_duration
        self._end_time = end_time
        self._attempt_number = attempt_number
        self._cluster_instance = cluster_instance
        self._git_source = git_source

    @classmethod
    def from_dict(cls, dikt) -> 'RunTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RunTask of this RunTask.  # noqa: E501
        :rtype: RunTask
        """
        return util.deserialize_model(dikt, cls)

    @property
    def run_id(self):
        """Gets the run_id of this RunTask.

        The ID of the task run.  # noqa: E501

        :return: The run_id of this RunTask.
        :rtype: int
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this RunTask.

        The ID of the task run.  # noqa: E501

        :param run_id: The run_id of this RunTask.
        :type run_id: int
        """

        self._run_id = run_id

    @property
    def task_key(self):
        """Gets the task_key of this RunTask.

        A unique name for the task. This field is used to refer to this task from other tasks. This field is required and must be unique within its parent job. On Update or Reset, this field is used to reference the tasks to be updated or reset. The maximum length is 100 characters.  # noqa: E501

        :return: The task_key of this RunTask.
        :rtype: str
        """
        return self._task_key

    @task_key.setter
    def task_key(self, task_key):
        """Sets the task_key of this RunTask.

        A unique name for the task. This field is used to refer to this task from other tasks. This field is required and must be unique within its parent job. On Update or Reset, this field is used to reference the tasks to be updated or reset. The maximum length is 100 characters.  # noqa: E501

        :param task_key: The task_key of this RunTask.
        :type task_key: str
        """
        if task_key is not None and len(task_key) > 100:
            raise ValueError("Invalid value for `task_key`, length must be less than or equal to `100`")  # noqa: E501
        if task_key is not None and len(task_key) < 1:
            raise ValueError("Invalid value for `task_key`, length must be greater than or equal to `1`")  # noqa: E501
        if task_key is not None and not re.search(r'^[\w\-]+$', task_key):  # noqa: E501
            raise ValueError("Invalid value for `task_key`, must be a follow pattern or equal to `/^[\w\-]+$/`")  # noqa: E501

        self._task_key = task_key

    @property
    def description(self):
        """Gets the description of this RunTask.

        An optional description for this task. The maximum length is 4096 bytes.  # noqa: E501

        :return: The description of this RunTask.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RunTask.

        An optional description for this task. The maximum length is 4096 bytes.  # noqa: E501

        :param description: The description of this RunTask.
        :type description: str
        """
        if description is not None and len(description) > 4096:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4096`")  # noqa: E501

        self._description = description

    @property
    def state(self):
        """Gets the state of this RunTask.


        :return: The state of this RunTask.
        :rtype: RunState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RunTask.


        :param state: The state of this RunTask.
        :type state: RunState
        """

        self._state = state

    @property
    def depends_on(self):
        """Gets the depends_on of this RunTask.

        An optional array of objects specifying the dependency graph of the task. All tasks specified in this field must complete successfully before executing this task. The key is `task_key`, and the value is the name assigned to the dependent task. This field is required when a job consists of more than one task.  # noqa: E501

        :return: The depends_on of this RunTask.
        :rtype: List[TaskDependenciesInner]
        """
        return self._depends_on

    @depends_on.setter
    def depends_on(self, depends_on):
        """Sets the depends_on of this RunTask.

        An optional array of objects specifying the dependency graph of the task. All tasks specified in this field must complete successfully before executing this task. The key is `task_key`, and the value is the name assigned to the dependent task. This field is required when a job consists of more than one task.  # noqa: E501

        :param depends_on: The depends_on of this RunTask.
        :type depends_on: List[TaskDependenciesInner]
        """

        self._depends_on = depends_on

    @property
    def existing_cluster_id(self):
        """Gets the existing_cluster_id of this RunTask.

        If existing_cluster_id, the ID of an existing cluster that is used for all runs of this job. When running jobs on an existing cluster, you may need to manually restart the cluster if it stops responding. We suggest running jobs on new clusters for greater reliability.  # noqa: E501

        :return: The existing_cluster_id of this RunTask.
        :rtype: str
        """
        return self._existing_cluster_id

    @existing_cluster_id.setter
    def existing_cluster_id(self, existing_cluster_id):
        """Sets the existing_cluster_id of this RunTask.

        If existing_cluster_id, the ID of an existing cluster that is used for all runs of this job. When running jobs on an existing cluster, you may need to manually restart the cluster if it stops responding. We suggest running jobs on new clusters for greater reliability.  # noqa: E501

        :param existing_cluster_id: The existing_cluster_id of this RunTask.
        :type existing_cluster_id: str
        """

        self._existing_cluster_id = existing_cluster_id

    @property
    def new_cluster(self):
        """Gets the new_cluster of this RunTask.


        :return: The new_cluster of this RunTask.
        :rtype: NewCluster
        """
        return self._new_cluster

    @new_cluster.setter
    def new_cluster(self, new_cluster):
        """Sets the new_cluster of this RunTask.


        :param new_cluster: The new_cluster of this RunTask.
        :type new_cluster: NewCluster
        """

        self._new_cluster = new_cluster

    @property
    def libraries(self):
        """Gets the libraries of this RunTask.

        An optional list of libraries to be installed on the cluster that executes the job. The default value is an empty list.  # noqa: E501

        :return: The libraries of this RunTask.
        :rtype: List[Library]
        """
        return self._libraries

    @libraries.setter
    def libraries(self, libraries):
        """Sets the libraries of this RunTask.

        An optional list of libraries to be installed on the cluster that executes the job. The default value is an empty list.  # noqa: E501

        :param libraries: The libraries of this RunTask.
        :type libraries: List[Library]
        """

        self._libraries = libraries

    @property
    def notebook_task(self):
        """Gets the notebook_task of this RunTask.


        :return: The notebook_task of this RunTask.
        :rtype: NotebookTask
        """
        return self._notebook_task

    @notebook_task.setter
    def notebook_task(self, notebook_task):
        """Sets the notebook_task of this RunTask.


        :param notebook_task: The notebook_task of this RunTask.
        :type notebook_task: NotebookTask
        """

        self._notebook_task = notebook_task

    @property
    def spark_jar_task(self):
        """Gets the spark_jar_task of this RunTask.


        :return: The spark_jar_task of this RunTask.
        :rtype: SparkJarTask
        """
        return self._spark_jar_task

    @spark_jar_task.setter
    def spark_jar_task(self, spark_jar_task):
        """Sets the spark_jar_task of this RunTask.


        :param spark_jar_task: The spark_jar_task of this RunTask.
        :type spark_jar_task: SparkJarTask
        """

        self._spark_jar_task = spark_jar_task

    @property
    def spark_python_task(self):
        """Gets the spark_python_task of this RunTask.


        :return: The spark_python_task of this RunTask.
        :rtype: SparkPythonTask
        """
        return self._spark_python_task

    @spark_python_task.setter
    def spark_python_task(self, spark_python_task):
        """Sets the spark_python_task of this RunTask.


        :param spark_python_task: The spark_python_task of this RunTask.
        :type spark_python_task: SparkPythonTask
        """

        self._spark_python_task = spark_python_task

    @property
    def spark_submit_task(self):
        """Gets the spark_submit_task of this RunTask.


        :return: The spark_submit_task of this RunTask.
        :rtype: SparkSubmitTask
        """
        return self._spark_submit_task

    @spark_submit_task.setter
    def spark_submit_task(self, spark_submit_task):
        """Sets the spark_submit_task of this RunTask.


        :param spark_submit_task: The spark_submit_task of this RunTask.
        :type spark_submit_task: SparkSubmitTask
        """

        self._spark_submit_task = spark_submit_task

    @property
    def pipeline_task(self):
        """Gets the pipeline_task of this RunTask.


        :return: The pipeline_task of this RunTask.
        :rtype: PipelineTask
        """
        return self._pipeline_task

    @pipeline_task.setter
    def pipeline_task(self, pipeline_task):
        """Sets the pipeline_task of this RunTask.


        :param pipeline_task: The pipeline_task of this RunTask.
        :type pipeline_task: PipelineTask
        """

        self._pipeline_task = pipeline_task

    @property
    def python_wheel_task(self):
        """Gets the python_wheel_task of this RunTask.


        :return: The python_wheel_task of this RunTask.
        :rtype: PythonWheelTask
        """
        return self._python_wheel_task

    @python_wheel_task.setter
    def python_wheel_task(self, python_wheel_task):
        """Sets the python_wheel_task of this RunTask.


        :param python_wheel_task: The python_wheel_task of this RunTask.
        :type python_wheel_task: PythonWheelTask
        """

        self._python_wheel_task = python_wheel_task

    @property
    def start_time(self):
        """Gets the start_time of this RunTask.

        The time at which this run was started in epoch milliseconds (milliseconds since 1/1/1970 UTC). This may not be the time when the job task starts executing, for example, if the job is scheduled to run on a new cluster, this is the time the cluster creation call is issued.  # noqa: E501

        :return: The start_time of this RunTask.
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this RunTask.

        The time at which this run was started in epoch milliseconds (milliseconds since 1/1/1970 UTC). This may not be the time when the job task starts executing, for example, if the job is scheduled to run on a new cluster, this is the time the cluster creation call is issued.  # noqa: E501

        :param start_time: The start_time of this RunTask.
        :type start_time: int
        """

        self._start_time = start_time

    @property
    def setup_duration(self):
        """Gets the setup_duration of this RunTask.

        The time it took to set up the cluster in milliseconds. For runs that run on new clusters this is the cluster creation time, for runs that run on existing clusters this time should be very short.  # noqa: E501

        :return: The setup_duration of this RunTask.
        :rtype: int
        """
        return self._setup_duration

    @setup_duration.setter
    def setup_duration(self, setup_duration):
        """Sets the setup_duration of this RunTask.

        The time it took to set up the cluster in milliseconds. For runs that run on new clusters this is the cluster creation time, for runs that run on existing clusters this time should be very short.  # noqa: E501

        :param setup_duration: The setup_duration of this RunTask.
        :type setup_duration: int
        """

        self._setup_duration = setup_duration

    @property
    def execution_duration(self):
        """Gets the execution_duration of this RunTask.

        The time in milliseconds it took to execute the commands in the JAR or notebook until they completed, failed, timed out, were cancelled, or encountered an unexpected error.  # noqa: E501

        :return: The execution_duration of this RunTask.
        :rtype: int
        """
        return self._execution_duration

    @execution_duration.setter
    def execution_duration(self, execution_duration):
        """Sets the execution_duration of this RunTask.

        The time in milliseconds it took to execute the commands in the JAR or notebook until they completed, failed, timed out, were cancelled, or encountered an unexpected error.  # noqa: E501

        :param execution_duration: The execution_duration of this RunTask.
        :type execution_duration: int
        """

        self._execution_duration = execution_duration

    @property
    def cleanup_duration(self):
        """Gets the cleanup_duration of this RunTask.

        The time in milliseconds it took to terminate the cluster and clean up any associated artifacts. The total duration of the run is the sum of the setup_duration, the execution_duration, and the cleanup_duration.  # noqa: E501

        :return: The cleanup_duration of this RunTask.
        :rtype: int
        """
        return self._cleanup_duration

    @cleanup_duration.setter
    def cleanup_duration(self, cleanup_duration):
        """Sets the cleanup_duration of this RunTask.

        The time in milliseconds it took to terminate the cluster and clean up any associated artifacts. The total duration of the run is the sum of the setup_duration, the execution_duration, and the cleanup_duration.  # noqa: E501

        :param cleanup_duration: The cleanup_duration of this RunTask.
        :type cleanup_duration: int
        """

        self._cleanup_duration = cleanup_duration

    @property
    def end_time(self):
        """Gets the end_time of this RunTask.

        The time at which this run ended in epoch milliseconds (milliseconds since 1/1/1970 UTC). This field is set to 0 if the job is still running.  # noqa: E501

        :return: The end_time of this RunTask.
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this RunTask.

        The time at which this run ended in epoch milliseconds (milliseconds since 1/1/1970 UTC). This field is set to 0 if the job is still running.  # noqa: E501

        :param end_time: The end_time of this RunTask.
        :type end_time: int
        """

        self._end_time = end_time

    @property
    def attempt_number(self):
        """Gets the attempt_number of this RunTask.

        The sequence number of this run attempt for a triggered job run. The initial attempt of a run has an attempt_number of 0\\. If the initial run attempt fails, and the job has a retry policy (`max_retries` \\> 0), subsequent runs are created with an `original_attempt_run_id` of the original attempt’s ID and an incrementing `attempt_number`. Runs are retried only until they succeed, and the maximum `attempt_number` is the same as the `max_retries` value for the job.  # noqa: E501

        :return: The attempt_number of this RunTask.
        :rtype: int
        """
        return self._attempt_number

    @attempt_number.setter
    def attempt_number(self, attempt_number):
        """Sets the attempt_number of this RunTask.

        The sequence number of this run attempt for a triggered job run. The initial attempt of a run has an attempt_number of 0\\. If the initial run attempt fails, and the job has a retry policy (`max_retries` \\> 0), subsequent runs are created with an `original_attempt_run_id` of the original attempt’s ID and an incrementing `attempt_number`. Runs are retried only until they succeed, and the maximum `attempt_number` is the same as the `max_retries` value for the job.  # noqa: E501

        :param attempt_number: The attempt_number of this RunTask.
        :type attempt_number: int
        """

        self._attempt_number = attempt_number

    @property
    def cluster_instance(self):
        """Gets the cluster_instance of this RunTask.


        :return: The cluster_instance of this RunTask.
        :rtype: ClusterInstance
        """
        return self._cluster_instance

    @cluster_instance.setter
    def cluster_instance(self, cluster_instance):
        """Sets the cluster_instance of this RunTask.


        :param cluster_instance: The cluster_instance of this RunTask.
        :type cluster_instance: ClusterInstance
        """

        self._cluster_instance = cluster_instance

    @property
    def git_source(self):
        """Gets the git_source of this RunTask.


        :return: The git_source of this RunTask.
        :rtype: GitSource
        """
        return self._git_source

    @git_source.setter
    def git_source(self, git_source):
        """Sets the git_source of this RunTask.


        :param git_source: The git_source of this RunTask.
        :type git_source: GitSource
        """

        self._git_source = git_source
