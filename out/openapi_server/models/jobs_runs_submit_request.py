# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.access_control_list import AccessControlList
from openapi_server.models.access_control_request import AccessControlRequest
from openapi_server.models.git_source import GitSource
from openapi_server.models.run_submit_settings import RunSubmitSettings
from openapi_server.models.run_submit_task_settings import RunSubmitTaskSettings
from openapi_server import util

from openapi_server.models.access_control_list import AccessControlList  # noqa: E501
from openapi_server.models.access_control_request import AccessControlRequest  # noqa: E501
from openapi_server.models.git_source import GitSource  # noqa: E501
from openapi_server.models.run_submit_settings import RunSubmitSettings  # noqa: E501
from openapi_server.models.run_submit_task_settings import RunSubmitTaskSettings  # noqa: E501

class JobsRunsSubmitRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tasks=None, run_name=None, git_source=None, timeout_seconds=None, idempotency_token=None, access_control_list=None):  # noqa: E501
        """JobsRunsSubmitRequest - a model defined in OpenAPI

        :param tasks: The tasks of this JobsRunsSubmitRequest.  # noqa: E501
        :type tasks: List[RunSubmitTaskSettings]
        :param run_name: The run_name of this JobsRunsSubmitRequest.  # noqa: E501
        :type run_name: str
        :param git_source: The git_source of this JobsRunsSubmitRequest.  # noqa: E501
        :type git_source: GitSource
        :param timeout_seconds: The timeout_seconds of this JobsRunsSubmitRequest.  # noqa: E501
        :type timeout_seconds: int
        :param idempotency_token: The idempotency_token of this JobsRunsSubmitRequest.  # noqa: E501
        :type idempotency_token: str
        :param access_control_list: The access_control_list of this JobsRunsSubmitRequest.  # noqa: E501
        :type access_control_list: List[AccessControlRequest]
        """
        self.openapi_types = {
            'tasks': List[RunSubmitTaskSettings],
            'run_name': str,
            'git_source': GitSource,
            'timeout_seconds': int,
            'idempotency_token': str,
            'access_control_list': List[AccessControlRequest]
        }

        self.attribute_map = {
            'tasks': 'tasks',
            'run_name': 'run_name',
            'git_source': 'git_source',
            'timeout_seconds': 'timeout_seconds',
            'idempotency_token': 'idempotency_token',
            'access_control_list': 'access_control_list'
        }

        self._tasks = tasks
        self._run_name = run_name
        self._git_source = git_source
        self._timeout_seconds = timeout_seconds
        self._idempotency_token = idempotency_token
        self._access_control_list = access_control_list

    @classmethod
    def from_dict(cls, dikt) -> 'JobsRunsSubmitRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JobsRunsSubmit_request of this JobsRunsSubmitRequest.  # noqa: E501
        :rtype: JobsRunsSubmitRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tasks(self):
        """Gets the tasks of this JobsRunsSubmitRequest.


        :return: The tasks of this JobsRunsSubmitRequest.
        :rtype: List[RunSubmitTaskSettings]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this JobsRunsSubmitRequest.


        :param tasks: The tasks of this JobsRunsSubmitRequest.
        :type tasks: List[RunSubmitTaskSettings]
        """
        if tasks is not None and len(tasks) > 100:
            raise ValueError("Invalid value for `tasks`, number of items must be less than or equal to `100`")  # noqa: E501

        self._tasks = tasks

    @property
    def run_name(self):
        """Gets the run_name of this JobsRunsSubmitRequest.

        An optional name for the run. The default value is `Untitled`.  # noqa: E501

        :return: The run_name of this JobsRunsSubmitRequest.
        :rtype: str
        """
        return self._run_name

    @run_name.setter
    def run_name(self, run_name):
        """Sets the run_name of this JobsRunsSubmitRequest.

        An optional name for the run. The default value is `Untitled`.  # noqa: E501

        :param run_name: The run_name of this JobsRunsSubmitRequest.
        :type run_name: str
        """

        self._run_name = run_name

    @property
    def git_source(self):
        """Gets the git_source of this JobsRunsSubmitRequest.


        :return: The git_source of this JobsRunsSubmitRequest.
        :rtype: GitSource
        """
        return self._git_source

    @git_source.setter
    def git_source(self, git_source):
        """Sets the git_source of this JobsRunsSubmitRequest.


        :param git_source: The git_source of this JobsRunsSubmitRequest.
        :type git_source: GitSource
        """

        self._git_source = git_source

    @property
    def timeout_seconds(self):
        """Gets the timeout_seconds of this JobsRunsSubmitRequest.

        An optional timeout applied to each run of this job. The default behavior is to have no timeout.  # noqa: E501

        :return: The timeout_seconds of this JobsRunsSubmitRequest.
        :rtype: int
        """
        return self._timeout_seconds

    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds):
        """Sets the timeout_seconds of this JobsRunsSubmitRequest.

        An optional timeout applied to each run of this job. The default behavior is to have no timeout.  # noqa: E501

        :param timeout_seconds: The timeout_seconds of this JobsRunsSubmitRequest.
        :type timeout_seconds: int
        """

        self._timeout_seconds = timeout_seconds

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this JobsRunsSubmitRequest.

        An optional token that can be used to guarantee the idempotency of job run requests. If a run with the provided token already exists, the request does not create a new run but returns the ID of the existing run instead.  If you specify the idempotency token, upon failure you can retry until the request succeeds. Databricks guarantees that exactly one run is launched with that idempotency token.  This token must have at most 64 characters.  For more information, see [How to ensure idempotency for jobs](https://kb.databricks.com/jobs/jobs-idempotency.html).  # noqa: E501

        :return: The idempotency_token of this JobsRunsSubmitRequest.
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this JobsRunsSubmitRequest.

        An optional token that can be used to guarantee the idempotency of job run requests. If a run with the provided token already exists, the request does not create a new run but returns the ID of the existing run instead.  If you specify the idempotency token, upon failure you can retry until the request succeeds. Databricks guarantees that exactly one run is launched with that idempotency token.  This token must have at most 64 characters.  For more information, see [How to ensure idempotency for jobs](https://kb.databricks.com/jobs/jobs-idempotency.html).  # noqa: E501

        :param idempotency_token: The idempotency_token of this JobsRunsSubmitRequest.
        :type idempotency_token: str
        """

        self._idempotency_token = idempotency_token

    @property
    def access_control_list(self):
        """Gets the access_control_list of this JobsRunsSubmitRequest.

        List of permissions to set on the job.  # noqa: E501

        :return: The access_control_list of this JobsRunsSubmitRequest.
        :rtype: List[AccessControlRequest]
        """
        return self._access_control_list

    @access_control_list.setter
    def access_control_list(self, access_control_list):
        """Sets the access_control_list of this JobsRunsSubmitRequest.

        List of permissions to set on the job.  # noqa: E501

        :param access_control_list: The access_control_list of this JobsRunsSubmitRequest.
        :type access_control_list: List[AccessControlRequest]
        """

        self._access_control_list = access_control_list
