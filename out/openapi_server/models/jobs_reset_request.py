# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.job_settings import JobSettings
from openapi_server import util

from openapi_server.models.job_settings import JobSettings  # noqa: E501

class JobsResetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_id=None, new_settings=None):  # noqa: E501
        """JobsResetRequest - a model defined in OpenAPI

        :param job_id: The job_id of this JobsResetRequest.  # noqa: E501
        :type job_id: int
        :param new_settings: The new_settings of this JobsResetRequest.  # noqa: E501
        :type new_settings: JobSettings
        """
        self.openapi_types = {
            'job_id': int,
            'new_settings': JobSettings
        }

        self.attribute_map = {
            'job_id': 'job_id',
            'new_settings': 'new_settings'
        }

        self._job_id = job_id
        self._new_settings = new_settings

    @classmethod
    def from_dict(cls, dikt) -> 'JobsResetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JobsReset_request of this JobsResetRequest.  # noqa: E501
        :rtype: JobsResetRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self):
        """Gets the job_id of this JobsResetRequest.

        The canonical identifier of the job to reset. This field is required.  # noqa: E501

        :return: The job_id of this JobsResetRequest.
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this JobsResetRequest.

        The canonical identifier of the job to reset. This field is required.  # noqa: E501

        :param job_id: The job_id of this JobsResetRequest.
        :type job_id: int
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")  # noqa: E501

        self._job_id = job_id

    @property
    def new_settings(self):
        """Gets the new_settings of this JobsResetRequest.


        :return: The new_settings of this JobsResetRequest.
        :rtype: JobSettings
        """
        return self._new_settings

    @new_settings.setter
    def new_settings(self, new_settings):
        """Sets the new_settings of this JobsResetRequest.


        :param new_settings: The new_settings of this JobsResetRequest.
        :type new_settings: JobSettings
        """

        self._new_settings = new_settings
