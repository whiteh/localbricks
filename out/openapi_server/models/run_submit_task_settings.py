# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.library import Library
from openapi_server.models.new_cluster import NewCluster
from openapi_server.models.notebook_task import NotebookTask
from openapi_server.models.pipeline_task import PipelineTask
from openapi_server.models.python_wheel_task import PythonWheelTask
from openapi_server.models.spark_jar_task import SparkJarTask
from openapi_server.models.spark_python_task import SparkPythonTask
from openapi_server.models.spark_submit_task import SparkSubmitTask
from openapi_server.models.task_dependencies_inner import TaskDependenciesInner
import re
from openapi_server import util

from openapi_server.models.library import Library  # noqa: E501
from openapi_server.models.new_cluster import NewCluster  # noqa: E501
from openapi_server.models.notebook_task import NotebookTask  # noqa: E501
from openapi_server.models.pipeline_task import PipelineTask  # noqa: E501
from openapi_server.models.python_wheel_task import PythonWheelTask  # noqa: E501
from openapi_server.models.spark_jar_task import SparkJarTask  # noqa: E501
from openapi_server.models.spark_python_task import SparkPythonTask  # noqa: E501
from openapi_server.models.spark_submit_task import SparkSubmitTask  # noqa: E501
from openapi_server.models.task_dependencies_inner import TaskDependenciesInner  # noqa: E501
import re  # noqa: E501

class RunSubmitTaskSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, task_key=None, depends_on=None, existing_cluster_id=None, new_cluster=None, notebook_task=None, spark_jar_task=None, spark_python_task=None, spark_submit_task=None, pipeline_task=None, python_wheel_task=None, libraries=None, timeout_seconds=None):  # noqa: E501
        """RunSubmitTaskSettings - a model defined in OpenAPI

        :param task_key: The task_key of this RunSubmitTaskSettings.  # noqa: E501
        :type task_key: str
        :param depends_on: The depends_on of this RunSubmitTaskSettings.  # noqa: E501
        :type depends_on: List[TaskDependenciesInner]
        :param existing_cluster_id: The existing_cluster_id of this RunSubmitTaskSettings.  # noqa: E501
        :type existing_cluster_id: str
        :param new_cluster: The new_cluster of this RunSubmitTaskSettings.  # noqa: E501
        :type new_cluster: NewCluster
        :param notebook_task: The notebook_task of this RunSubmitTaskSettings.  # noqa: E501
        :type notebook_task: NotebookTask
        :param spark_jar_task: The spark_jar_task of this RunSubmitTaskSettings.  # noqa: E501
        :type spark_jar_task: SparkJarTask
        :param spark_python_task: The spark_python_task of this RunSubmitTaskSettings.  # noqa: E501
        :type spark_python_task: SparkPythonTask
        :param spark_submit_task: The spark_submit_task of this RunSubmitTaskSettings.  # noqa: E501
        :type spark_submit_task: SparkSubmitTask
        :param pipeline_task: The pipeline_task of this RunSubmitTaskSettings.  # noqa: E501
        :type pipeline_task: PipelineTask
        :param python_wheel_task: The python_wheel_task of this RunSubmitTaskSettings.  # noqa: E501
        :type python_wheel_task: PythonWheelTask
        :param libraries: The libraries of this RunSubmitTaskSettings.  # noqa: E501
        :type libraries: List[Library]
        :param timeout_seconds: The timeout_seconds of this RunSubmitTaskSettings.  # noqa: E501
        :type timeout_seconds: int
        """
        self.openapi_types = {
            'task_key': str,
            'depends_on': List[TaskDependenciesInner],
            'existing_cluster_id': str,
            'new_cluster': NewCluster,
            'notebook_task': NotebookTask,
            'spark_jar_task': SparkJarTask,
            'spark_python_task': SparkPythonTask,
            'spark_submit_task': SparkSubmitTask,
            'pipeline_task': PipelineTask,
            'python_wheel_task': PythonWheelTask,
            'libraries': List[Library],
            'timeout_seconds': int
        }

        self.attribute_map = {
            'task_key': 'task_key',
            'depends_on': 'depends_on',
            'existing_cluster_id': 'existing_cluster_id',
            'new_cluster': 'new_cluster',
            'notebook_task': 'notebook_task',
            'spark_jar_task': 'spark_jar_task',
            'spark_python_task': 'spark_python_task',
            'spark_submit_task': 'spark_submit_task',
            'pipeline_task': 'pipeline_task',
            'python_wheel_task': 'python_wheel_task',
            'libraries': 'libraries',
            'timeout_seconds': 'timeout_seconds'
        }

        self._task_key = task_key
        self._depends_on = depends_on
        self._existing_cluster_id = existing_cluster_id
        self._new_cluster = new_cluster
        self._notebook_task = notebook_task
        self._spark_jar_task = spark_jar_task
        self._spark_python_task = spark_python_task
        self._spark_submit_task = spark_submit_task
        self._pipeline_task = pipeline_task
        self._python_wheel_task = python_wheel_task
        self._libraries = libraries
        self._timeout_seconds = timeout_seconds

    @classmethod
    def from_dict(cls, dikt) -> 'RunSubmitTaskSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RunSubmitTaskSettings of this RunSubmitTaskSettings.  # noqa: E501
        :rtype: RunSubmitTaskSettings
        """
        return util.deserialize_model(dikt, cls)

    @property
    def task_key(self):
        """Gets the task_key of this RunSubmitTaskSettings.

        A unique name for the task. This field is used to refer to this task from other tasks. This field is required and must be unique within its parent job. On Update or Reset, this field is used to reference the tasks to be updated or reset. The maximum length is 100 characters.  # noqa: E501

        :return: The task_key of this RunSubmitTaskSettings.
        :rtype: str
        """
        return self._task_key

    @task_key.setter
    def task_key(self, task_key):
        """Sets the task_key of this RunSubmitTaskSettings.

        A unique name for the task. This field is used to refer to this task from other tasks. This field is required and must be unique within its parent job. On Update or Reset, this field is used to reference the tasks to be updated or reset. The maximum length is 100 characters.  # noqa: E501

        :param task_key: The task_key of this RunSubmitTaskSettings.
        :type task_key: str
        """
        if task_key is None:
            raise ValueError("Invalid value for `task_key`, must not be `None`")  # noqa: E501
        if task_key is not None and len(task_key) > 100:
            raise ValueError("Invalid value for `task_key`, length must be less than or equal to `100`")  # noqa: E501
        if task_key is not None and len(task_key) < 1:
            raise ValueError("Invalid value for `task_key`, length must be greater than or equal to `1`")  # noqa: E501
        if task_key is not None and not re.search(r'^[\w\-]+$', task_key):  # noqa: E501
            raise ValueError("Invalid value for `task_key`, must be a follow pattern or equal to `/^[\w\-]+$/`")  # noqa: E501

        self._task_key = task_key

    @property
    def depends_on(self):
        """Gets the depends_on of this RunSubmitTaskSettings.

        An optional array of objects specifying the dependency graph of the task. All tasks specified in this field must complete successfully before executing this task. The key is `task_key`, and the value is the name assigned to the dependent task. This field is required when a job consists of more than one task.  # noqa: E501

        :return: The depends_on of this RunSubmitTaskSettings.
        :rtype: List[TaskDependenciesInner]
        """
        return self._depends_on

    @depends_on.setter
    def depends_on(self, depends_on):
        """Sets the depends_on of this RunSubmitTaskSettings.

        An optional array of objects specifying the dependency graph of the task. All tasks specified in this field must complete successfully before executing this task. The key is `task_key`, and the value is the name assigned to the dependent task. This field is required when a job consists of more than one task.  # noqa: E501

        :param depends_on: The depends_on of this RunSubmitTaskSettings.
        :type depends_on: List[TaskDependenciesInner]
        """

        self._depends_on = depends_on

    @property
    def existing_cluster_id(self):
        """Gets the existing_cluster_id of this RunSubmitTaskSettings.

        If existing_cluster_id, the ID of an existing cluster that is used for all runs of this task. When running tasks on an existing cluster, you may need to manually restart the cluster if it stops responding. We suggest running jobs on new clusters for greater reliability.  # noqa: E501

        :return: The existing_cluster_id of this RunSubmitTaskSettings.
        :rtype: str
        """
        return self._existing_cluster_id

    @existing_cluster_id.setter
    def existing_cluster_id(self, existing_cluster_id):
        """Sets the existing_cluster_id of this RunSubmitTaskSettings.

        If existing_cluster_id, the ID of an existing cluster that is used for all runs of this task. When running tasks on an existing cluster, you may need to manually restart the cluster if it stops responding. We suggest running jobs on new clusters for greater reliability.  # noqa: E501

        :param existing_cluster_id: The existing_cluster_id of this RunSubmitTaskSettings.
        :type existing_cluster_id: str
        """

        self._existing_cluster_id = existing_cluster_id

    @property
    def new_cluster(self):
        """Gets the new_cluster of this RunSubmitTaskSettings.


        :return: The new_cluster of this RunSubmitTaskSettings.
        :rtype: NewCluster
        """
        return self._new_cluster

    @new_cluster.setter
    def new_cluster(self, new_cluster):
        """Sets the new_cluster of this RunSubmitTaskSettings.


        :param new_cluster: The new_cluster of this RunSubmitTaskSettings.
        :type new_cluster: NewCluster
        """

        self._new_cluster = new_cluster

    @property
    def notebook_task(self):
        """Gets the notebook_task of this RunSubmitTaskSettings.


        :return: The notebook_task of this RunSubmitTaskSettings.
        :rtype: NotebookTask
        """
        return self._notebook_task

    @notebook_task.setter
    def notebook_task(self, notebook_task):
        """Sets the notebook_task of this RunSubmitTaskSettings.


        :param notebook_task: The notebook_task of this RunSubmitTaskSettings.
        :type notebook_task: NotebookTask
        """

        self._notebook_task = notebook_task

    @property
    def spark_jar_task(self):
        """Gets the spark_jar_task of this RunSubmitTaskSettings.


        :return: The spark_jar_task of this RunSubmitTaskSettings.
        :rtype: SparkJarTask
        """
        return self._spark_jar_task

    @spark_jar_task.setter
    def spark_jar_task(self, spark_jar_task):
        """Sets the spark_jar_task of this RunSubmitTaskSettings.


        :param spark_jar_task: The spark_jar_task of this RunSubmitTaskSettings.
        :type spark_jar_task: SparkJarTask
        """

        self._spark_jar_task = spark_jar_task

    @property
    def spark_python_task(self):
        """Gets the spark_python_task of this RunSubmitTaskSettings.


        :return: The spark_python_task of this RunSubmitTaskSettings.
        :rtype: SparkPythonTask
        """
        return self._spark_python_task

    @spark_python_task.setter
    def spark_python_task(self, spark_python_task):
        """Sets the spark_python_task of this RunSubmitTaskSettings.


        :param spark_python_task: The spark_python_task of this RunSubmitTaskSettings.
        :type spark_python_task: SparkPythonTask
        """

        self._spark_python_task = spark_python_task

    @property
    def spark_submit_task(self):
        """Gets the spark_submit_task of this RunSubmitTaskSettings.


        :return: The spark_submit_task of this RunSubmitTaskSettings.
        :rtype: SparkSubmitTask
        """
        return self._spark_submit_task

    @spark_submit_task.setter
    def spark_submit_task(self, spark_submit_task):
        """Sets the spark_submit_task of this RunSubmitTaskSettings.


        :param spark_submit_task: The spark_submit_task of this RunSubmitTaskSettings.
        :type spark_submit_task: SparkSubmitTask
        """

        self._spark_submit_task = spark_submit_task

    @property
    def pipeline_task(self):
        """Gets the pipeline_task of this RunSubmitTaskSettings.


        :return: The pipeline_task of this RunSubmitTaskSettings.
        :rtype: PipelineTask
        """
        return self._pipeline_task

    @pipeline_task.setter
    def pipeline_task(self, pipeline_task):
        """Sets the pipeline_task of this RunSubmitTaskSettings.


        :param pipeline_task: The pipeline_task of this RunSubmitTaskSettings.
        :type pipeline_task: PipelineTask
        """

        self._pipeline_task = pipeline_task

    @property
    def python_wheel_task(self):
        """Gets the python_wheel_task of this RunSubmitTaskSettings.


        :return: The python_wheel_task of this RunSubmitTaskSettings.
        :rtype: PythonWheelTask
        """
        return self._python_wheel_task

    @python_wheel_task.setter
    def python_wheel_task(self, python_wheel_task):
        """Sets the python_wheel_task of this RunSubmitTaskSettings.


        :param python_wheel_task: The python_wheel_task of this RunSubmitTaskSettings.
        :type python_wheel_task: PythonWheelTask
        """

        self._python_wheel_task = python_wheel_task

    @property
    def libraries(self):
        """Gets the libraries of this RunSubmitTaskSettings.

        An optional list of libraries to be installed on the cluster that executes the task. The default value is an empty list.  # noqa: E501

        :return: The libraries of this RunSubmitTaskSettings.
        :rtype: List[Library]
        """
        return self._libraries

    @libraries.setter
    def libraries(self, libraries):
        """Sets the libraries of this RunSubmitTaskSettings.

        An optional list of libraries to be installed on the cluster that executes the task. The default value is an empty list.  # noqa: E501

        :param libraries: The libraries of this RunSubmitTaskSettings.
        :type libraries: List[Library]
        """

        self._libraries = libraries

    @property
    def timeout_seconds(self):
        """Gets the timeout_seconds of this RunSubmitTaskSettings.

        An optional timeout applied to each run of this job task. The default behavior is to have no timeout.  # noqa: E501

        :return: The timeout_seconds of this RunSubmitTaskSettings.
        :rtype: int
        """
        return self._timeout_seconds

    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds):
        """Sets the timeout_seconds of this RunSubmitTaskSettings.

        An optional timeout applied to each run of this job task. The default behavior is to have no timeout.  # noqa: E501

        :param timeout_seconds: The timeout_seconds of this RunSubmitTaskSettings.
        :type timeout_seconds: int
        """

        self._timeout_seconds = timeout_seconds
