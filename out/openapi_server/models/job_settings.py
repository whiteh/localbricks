# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.cron_schedule import CronSchedule
from openapi_server.models.git_source import GitSource
from openapi_server.models.job_cluster import JobCluster
from openapi_server.models.job_email_notifications import JobEmailNotifications
from openapi_server.models.job_task_settings import JobTaskSettings
from openapi_server import util

from openapi_server.models.cron_schedule import CronSchedule  # noqa: E501
from openapi_server.models.git_source import GitSource  # noqa: E501
from openapi_server.models.job_cluster import JobCluster  # noqa: E501
from openapi_server.models.job_email_notifications import JobEmailNotifications  # noqa: E501
from openapi_server.models.job_task_settings import JobTaskSettings  # noqa: E501

class JobSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name='Untitled', tags=None, tasks=None, job_clusters=None, email_notifications=None, timeout_seconds=None, schedule=None, max_concurrent_runs=None, git_source=None, format=None):  # noqa: E501
        """JobSettings - a model defined in OpenAPI

        :param name: The name of this JobSettings.  # noqa: E501
        :type name: str
        :param tags: The tags of this JobSettings.  # noqa: E501
        :type tags: object
        :param tasks: The tasks of this JobSettings.  # noqa: E501
        :type tasks: List[JobTaskSettings]
        :param job_clusters: The job_clusters of this JobSettings.  # noqa: E501
        :type job_clusters: List[JobCluster]
        :param email_notifications: The email_notifications of this JobSettings.  # noqa: E501
        :type email_notifications: JobEmailNotifications
        :param timeout_seconds: The timeout_seconds of this JobSettings.  # noqa: E501
        :type timeout_seconds: int
        :param schedule: The schedule of this JobSettings.  # noqa: E501
        :type schedule: CronSchedule
        :param max_concurrent_runs: The max_concurrent_runs of this JobSettings.  # noqa: E501
        :type max_concurrent_runs: int
        :param git_source: The git_source of this JobSettings.  # noqa: E501
        :type git_source: GitSource
        :param format: The format of this JobSettings.  # noqa: E501
        :type format: str
        """
        self.openapi_types = {
            'name': str,
            'tags': object,
            'tasks': List[JobTaskSettings],
            'job_clusters': List[JobCluster],
            'email_notifications': JobEmailNotifications,
            'timeout_seconds': int,
            'schedule': CronSchedule,
            'max_concurrent_runs': int,
            'git_source': GitSource,
            'format': str
        }

        self.attribute_map = {
            'name': 'name',
            'tags': 'tags',
            'tasks': 'tasks',
            'job_clusters': 'job_clusters',
            'email_notifications': 'email_notifications',
            'timeout_seconds': 'timeout_seconds',
            'schedule': 'schedule',
            'max_concurrent_runs': 'max_concurrent_runs',
            'git_source': 'git_source',
            'format': 'format'
        }

        self._name = name
        self._tags = tags
        self._tasks = tasks
        self._job_clusters = job_clusters
        self._email_notifications = email_notifications
        self._timeout_seconds = timeout_seconds
        self._schedule = schedule
        self._max_concurrent_runs = max_concurrent_runs
        self._git_source = git_source
        self._format = format

    @classmethod
    def from_dict(cls, dikt) -> 'JobSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JobSettings of this JobSettings.  # noqa: E501
        :rtype: JobSettings
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this JobSettings.

        An optional name for the job.  # noqa: E501

        :return: The name of this JobSettings.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JobSettings.

        An optional name for the job.  # noqa: E501

        :param name: The name of this JobSettings.
        :type name: str
        """

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this JobSettings.

        A map of tags associated with the job. These are forwarded to the cluster as cluster tags for jobs clusters, and are subject to the same limitations as cluster tags. A maximum of 25 tags can be added to the job.  # noqa: E501

        :return: The tags of this JobSettings.
        :rtype: object
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this JobSettings.

        A map of tags associated with the job. These are forwarded to the cluster as cluster tags for jobs clusters, and are subject to the same limitations as cluster tags. A maximum of 25 tags can be added to the job.  # noqa: E501

        :param tags: The tags of this JobSettings.
        :type tags: object
        """

        self._tags = tags

    @property
    def tasks(self):
        """Gets the tasks of this JobSettings.

        A list of task specifications to be executed by this job.  # noqa: E501

        :return: The tasks of this JobSettings.
        :rtype: List[JobTaskSettings]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this JobSettings.

        A list of task specifications to be executed by this job.  # noqa: E501

        :param tasks: The tasks of this JobSettings.
        :type tasks: List[JobTaskSettings]
        """
        if tasks is not None and len(tasks) > 100:
            raise ValueError("Invalid value for `tasks`, number of items must be less than or equal to `100`")  # noqa: E501

        self._tasks = tasks

    @property
    def job_clusters(self):
        """Gets the job_clusters of this JobSettings.

        A list of job cluster specifications that can be shared and reused by tasks of this job. Libraries cannot be declared in a shared job cluster. You must declare dependent libraries in task settings.  # noqa: E501

        :return: The job_clusters of this JobSettings.
        :rtype: List[JobCluster]
        """
        return self._job_clusters

    @job_clusters.setter
    def job_clusters(self, job_clusters):
        """Sets the job_clusters of this JobSettings.

        A list of job cluster specifications that can be shared and reused by tasks of this job. Libraries cannot be declared in a shared job cluster. You must declare dependent libraries in task settings.  # noqa: E501

        :param job_clusters: The job_clusters of this JobSettings.
        :type job_clusters: List[JobCluster]
        """
        if job_clusters is not None and len(job_clusters) > 100:
            raise ValueError("Invalid value for `job_clusters`, number of items must be less than or equal to `100`")  # noqa: E501

        self._job_clusters = job_clusters

    @property
    def email_notifications(self):
        """Gets the email_notifications of this JobSettings.


        :return: The email_notifications of this JobSettings.
        :rtype: JobEmailNotifications
        """
        return self._email_notifications

    @email_notifications.setter
    def email_notifications(self, email_notifications):
        """Sets the email_notifications of this JobSettings.


        :param email_notifications: The email_notifications of this JobSettings.
        :type email_notifications: JobEmailNotifications
        """

        self._email_notifications = email_notifications

    @property
    def timeout_seconds(self):
        """Gets the timeout_seconds of this JobSettings.

        An optional timeout applied to each run of this job. The default behavior is to have no timeout.  # noqa: E501

        :return: The timeout_seconds of this JobSettings.
        :rtype: int
        """
        return self._timeout_seconds

    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds):
        """Sets the timeout_seconds of this JobSettings.

        An optional timeout applied to each run of this job. The default behavior is to have no timeout.  # noqa: E501

        :param timeout_seconds: The timeout_seconds of this JobSettings.
        :type timeout_seconds: int
        """

        self._timeout_seconds = timeout_seconds

    @property
    def schedule(self):
        """Gets the schedule of this JobSettings.


        :return: The schedule of this JobSettings.
        :rtype: CronSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this JobSettings.


        :param schedule: The schedule of this JobSettings.
        :type schedule: CronSchedule
        """

        self._schedule = schedule

    @property
    def max_concurrent_runs(self):
        """Gets the max_concurrent_runs of this JobSettings.

        An optional maximum allowed number of concurrent runs of the job.  Set this value if you want to be able to execute multiple runs of the same job concurrently. This is useful for example if you trigger your job on a frequent schedule and want to allow consecutive runs to overlap with each other, or if you want to trigger multiple runs which differ by their input parameters.  This setting affects only new runs. For example, suppose the job’s concurrency is 4 and there are 4 concurrent active runs. Then setting the concurrency to 3 won’t kill any of the active runs. However, from then on, new runs are skipped unless there are fewer than 3 active runs.  This value cannot exceed 1000\\. Setting this value to 0 causes all new runs to be skipped. The default behavior is to allow only 1 concurrent run.  # noqa: E501

        :return: The max_concurrent_runs of this JobSettings.
        :rtype: int
        """
        return self._max_concurrent_runs

    @max_concurrent_runs.setter
    def max_concurrent_runs(self, max_concurrent_runs):
        """Sets the max_concurrent_runs of this JobSettings.

        An optional maximum allowed number of concurrent runs of the job.  Set this value if you want to be able to execute multiple runs of the same job concurrently. This is useful for example if you trigger your job on a frequent schedule and want to allow consecutive runs to overlap with each other, or if you want to trigger multiple runs which differ by their input parameters.  This setting affects only new runs. For example, suppose the job’s concurrency is 4 and there are 4 concurrent active runs. Then setting the concurrency to 3 won’t kill any of the active runs. However, from then on, new runs are skipped unless there are fewer than 3 active runs.  This value cannot exceed 1000\\. Setting this value to 0 causes all new runs to be skipped. The default behavior is to allow only 1 concurrent run.  # noqa: E501

        :param max_concurrent_runs: The max_concurrent_runs of this JobSettings.
        :type max_concurrent_runs: int
        """

        self._max_concurrent_runs = max_concurrent_runs

    @property
    def git_source(self):
        """Gets the git_source of this JobSettings.


        :return: The git_source of this JobSettings.
        :rtype: GitSource
        """
        return self._git_source

    @git_source.setter
    def git_source(self, git_source):
        """Sets the git_source of this JobSettings.


        :param git_source: The git_source of this JobSettings.
        :type git_source: GitSource
        """

        self._git_source = git_source

    @property
    def format(self):
        """Gets the format of this JobSettings.

        Used to tell what is the format of the job. This field is ignored in Create/Update/Reset calls. When using the Jobs API 2.1 this value is always set to `\"MULTI_TASK\"`.  # noqa: E501

        :return: The format of this JobSettings.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this JobSettings.

        Used to tell what is the format of the job. This field is ignored in Create/Update/Reset calls. When using the Jobs API 2.1 this value is always set to `\"MULTI_TASK\"`.  # noqa: E501

        :param format: The format of this JobSettings.
        :type format: str
        """
        allowed_values = ["SINGLE_TASK", "MULTI_TASK"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format
