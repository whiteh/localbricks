# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class RunNowInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_id=None, idempotency_token=None):  # noqa: E501
        """RunNowInput - a model defined in OpenAPI

        :param job_id: The job_id of this RunNowInput.  # noqa: E501
        :type job_id: int
        :param idempotency_token: The idempotency_token of this RunNowInput.  # noqa: E501
        :type idempotency_token: str
        """
        self.openapi_types = {
            'job_id': int,
            'idempotency_token': str
        }

        self.attribute_map = {
            'job_id': 'job_id',
            'idempotency_token': 'idempotency_token'
        }

        self._job_id = job_id
        self._idempotency_token = idempotency_token

    @classmethod
    def from_dict(cls, dikt) -> 'RunNowInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RunNowInput of this RunNowInput.  # noqa: E501
        :rtype: RunNowInput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self):
        """Gets the job_id of this RunNowInput.

        The ID of the job to be executed  # noqa: E501

        :return: The job_id of this RunNowInput.
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this RunNowInput.

        The ID of the job to be executed  # noqa: E501

        :param job_id: The job_id of this RunNowInput.
        :type job_id: int
        """

        self._job_id = job_id

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this RunNowInput.

        An optional token to guarantee the idempotency of job run requests. If a run with the provided token already exists, the request does not create a new run but returns the ID of the existing run instead.  If you specify the idempotency token, upon failure you can retry until the request succeeds. Databricks guarantees that exactly one run is launched with that idempotency token.  This token must have at most 64 characters.  For more information, see [How to ensure idempotency for jobs](https://kb.databricks.com/jobs/jobs-idempotency.html).  # noqa: E501

        :return: The idempotency_token of this RunNowInput.
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this RunNowInput.

        An optional token to guarantee the idempotency of job run requests. If a run with the provided token already exists, the request does not create a new run but returns the ID of the existing run instead.  If you specify the idempotency token, upon failure you can retry until the request succeeds. Databricks guarantees that exactly one run is launched with that idempotency token.  This token must have at most 64 characters.  For more information, see [How to ensure idempotency for jobs](https://kb.databricks.com/jobs/jobs-idempotency.html).  # noqa: E501

        :param idempotency_token: The idempotency_token of this RunNowInput.
        :type idempotency_token: str
        """

        self._idempotency_token = idempotency_token
