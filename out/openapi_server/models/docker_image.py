# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.docker_basic_auth import DockerBasicAuth
from openapi_server import util

from openapi_server.models.docker_basic_auth import DockerBasicAuth  # noqa: E501

class DockerImage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, url=None, basic_auth=None):  # noqa: E501
        """DockerImage - a model defined in OpenAPI

        :param url: The url of this DockerImage.  # noqa: E501
        :type url: str
        :param basic_auth: The basic_auth of this DockerImage.  # noqa: E501
        :type basic_auth: DockerBasicAuth
        """
        self.openapi_types = {
            'url': str,
            'basic_auth': DockerBasicAuth
        }

        self.attribute_map = {
            'url': 'url',
            'basic_auth': 'basic_auth'
        }

        self._url = url
        self._basic_auth = basic_auth

    @classmethod
    def from_dict(cls, dikt) -> 'DockerImage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DockerImage of this DockerImage.  # noqa: E501
        :rtype: DockerImage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def url(self):
        """Gets the url of this DockerImage.

        URL for the Docker image.  # noqa: E501

        :return: The url of this DockerImage.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DockerImage.

        URL for the Docker image.  # noqa: E501

        :param url: The url of this DockerImage.
        :type url: str
        """

        self._url = url

    @property
    def basic_auth(self):
        """Gets the basic_auth of this DockerImage.


        :return: The basic_auth of this DockerImage.
        :rtype: DockerBasicAuth
        """
        return self._basic_auth

    @basic_auth.setter
    def basic_auth(self, basic_auth):
        """Sets the basic_auth of this DockerImage.


        :param basic_auth: The basic_auth of this DockerImage.
        :type basic_auth: DockerBasicAuth
        """

        self._basic_auth = basic_auth
